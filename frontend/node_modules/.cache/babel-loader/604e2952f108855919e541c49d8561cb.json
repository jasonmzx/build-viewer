{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\Documents\\\\GitHub\\\\build-viewer\\\\frontend\\\\src\\\\components\\\\ViewV2.js\",\n    _this = this;\n\nimport React, { Suspense, useMemo } from 'react';\nimport Input from 'react-bootstrap/InputGroup';\nimport * as THREE from 'three';\nimport { Canvas, useLoader } from \"@react-three/fiber\";\nimport { OrbitControls, softShadows } from \"@react-three/drei\";\nimport { TextureLoader } from \"three/src/loaders/TextureLoader\";\nimport { Container } from \"react-bootstrap\";\nimport Box from './Box';\nimport TexturePlane from './TexturePlane';\nimport DisplayPlane from './DisplayPlane';\nimport textureMap from '../images/blocks/stone.png';\nimport { BufferAttribute, MeshBasicMaterial, MeshStandardMaterial } from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nsoftShadows();\n\nvar View = function View(props) {\n  var loadedTexture = new THREE.TextureLoader().load(\"stone.png\");\n  var vertices = new Float32Array([-1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0]);\n  var uniforms = {\n    // phong material uniforms\n    Ka: {\n      value: new THREE.Vector3(1, 1, 1)\n    },\n    Kd: {\n      value: new THREE.Vector3(1, 1, 1)\n    },\n    Ks: {\n      value: new THREE.Vector3(1, 1, 1)\n    },\n    LightIntensity: {\n      value: new THREE.Vector4(1, 0.5, 0.5, 1.0)\n    },\n    LightPosition: {\n      value: new THREE.Vector4(0.0, 2000.0, 0.0, 1.0)\n    },\n    Shininess: {\n      value: 200.0\n    }\n  };\n  var fragmentShader = \"\\n    varying vec3 Normal;\\n    varying vec3 Position;\\n\\n    uniform vec3 Ka;\\n    uniform vec3 Kd;\\n    uniform vec3 Ks;\\n    uniform vec4 LightPosition;\\n    uniform vec3 LightIntensity;\\n    uniform float Shininess;\\n\\n    vec3 phong() {\\n      vec3 n = normalize(Normal);\\n      vec3 s = normalize(vec3(LightPosition) - Position);\\n      vec3 v = normalize(vec3(-Position));\\n      vec3 r = reflect(-s, n);\\n\\n      vec3 ambient = Ka;\\n      vec3 diffuse = Kd * max(dot(s, n), 0.0);\\n      vec3 specular = Ks * pow(max(dot(r, v), 0.0), Shininess);\\n\\n      return LightIntensity * (ambient + diffuse + specular);\\n    }\\n\\n    void main() {\\n      vec3 blue = vec3(0.0, 1.0, 0.0);\\n      gl_FragColor = vec4(blue*phong(), 1.0);\\n  }\";\n  var vertexShader = \"\\n    varying vec3 Normal;\\n    varying vec3 Position;\\n\\n    void main() {\\n      Normal = normalize(normalMatrix * normal);\\n      Position = vec3(modelViewMatrix * vec4(position, 1.0));\\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n    }\\n  \";\n  var color_vertices = new Float32Array([1.0, 1.0, 0.0, 1, 1.0, 1.0, 0.5, 1, 1.0, 0.0, 1.0, 1, 1.0, 1.0, 0.0, 1, 1.0, 0.5, 0.0, 1, 1.0, 0.0, 1.0, 1, 1.0, 1.0, 0.0, 1, 1.0, 0.5, 0.0, 1, 1.0, 0.0, 1.0, 1]);\n  var meshMaterial = new THREE.MeshStandardMaterial({\n    map: loadedTexture,\n    color: 'red'\n  });\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      shadows: true,\n      style: {\n        position: \"relative\",\n        width: 750,\n        height: 750\n      },\n      gl: {\n        antialias: false\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n        intensity: 0.9\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 3\n      }, _this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n        castShadow: true,\n        position: [9, 9, 9],\n        intensity: 1.9,\n        \"shadow-mapSize-width\": 1024,\n        \"shadow-mapSize-height\": 1024,\n        \"shadow-camera-far\": 100,\n        \"shadow-camera-left\": -15,\n        \"shadow-camera-right\": 15,\n        \"shadow-camera-top\": 20,\n        \"shadow-camera-bottom\": -10\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 3\n      }, _this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n        enableZoom: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 3\n      }, _this), /*#__PURE__*/_jsxDEV(Suspense, {\n        fallback: null,\n        children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n          castShadow: true,\n          receiveShadow: true,\n          position: [1, 1, 1],\n          material: meshMaterial,\n          computeVertexNormals: \"true\",\n          children: [/*#__PURE__*/_jsxDEV(\"bufferGeometry\", {\n            attach: \"geometry\",\n            onUpdate: function onUpdate(self) {\n              return self.computeFaceNormals();\n            },\n            children: /*#__PURE__*/_jsxDEV(\"bufferAttribute\", {\n              attachObject: ['attributes', 'position'],\n              array: vertices,\n              itemSize: 3,\n              count: 9,\n              computeVertexNormals: \"true\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 7\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 5\n          }, _this), /*#__PURE__*/_jsxDEV(\"shaderMaterial\", {\n            map: loadedTexture,\n            receiveShadow: true,\n            attach: \"material\",\n            uniforms: uniforms,\n            fragmentShader: fragmentShader,\n            vertexShader: vertexShader\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 5\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 5\n        }, _this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n          castShadow: true,\n          receiveShadow: true,\n          position: [1, 1, 1.5],\n          computeVertexNormals: \"true\",\n          children: [/*#__PURE__*/_jsxDEV(\"bufferGeometry\", {\n            attach: \"geometry\",\n            args: [1, 1, 1],\n            children: /*#__PURE__*/_jsxDEV(\"bufferAttribute\", {\n              attachObject: ['attributes', 'position'],\n              array: vertices,\n              itemSize: 3,\n              count: 9\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 7\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 5\n          }, _this), /*#__PURE__*/_jsxDEV(\"shaderMaterial\", {\n            attach: \"material\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 5\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 5\n        }, _this), /*#__PURE__*/_jsxDEV(DisplayPlane, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 5\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 3\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 3\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 1\n  }, _this);\n};\n\n_c = View;\nexport default View;\n\nvar _c;\n\n$RefreshReg$(_c, \"View\");","map":{"version":3,"sources":["C:/Users/jason/Documents/GitHub/build-viewer/frontend/src/components/ViewV2.js"],"names":["React","Suspense","useMemo","Input","THREE","Canvas","useLoader","OrbitControls","softShadows","TextureLoader","Container","Box","TexturePlane","DisplayPlane","textureMap","BufferAttribute","MeshBasicMaterial","MeshStandardMaterial","View","props","loadedTexture","load","vertices","Float32Array","uniforms","Ka","value","Vector3","Kd","Ks","LightIntensity","Vector4","LightPosition","Shininess","fragmentShader","vertexShader","color_vertices","meshMaterial","map","color","position","width","height","antialias","self","computeFaceNormals"],"mappings":"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","sourcesContent":["import React, { Suspense, useMemo } from 'react'\r\nimport Input from 'react-bootstrap/InputGroup'\r\n\r\nimport * as THREE from 'three'\r\nimport { Canvas, useLoader} from \"@react-three/fiber\";\r\nimport { OrbitControls, softShadows } from \"@react-three/drei\";\r\n\r\nimport { TextureLoader } from \"three/src/loaders/TextureLoader\";\r\n\r\n\r\nimport {Container} from \"react-bootstrap\";\r\nimport Box from './Box';\r\nimport TexturePlane from './TexturePlane';\r\nimport DisplayPlane from './DisplayPlane';\r\nimport textureMap from '../images/blocks/stone.png';\r\nimport { BufferAttribute, MeshBasicMaterial, MeshStandardMaterial } from 'three';\r\n\r\nsoftShadows()\r\n\r\nconst View = (props) => {\r\n\r\n  const loadedTexture = new THREE.TextureLoader().load( \"stone.png\" );\r\n\r\n  const vertices = new Float32Array( [\r\n    -1.0, -1.0,  1.0,\r\n     1.0, -1.0,  1.0,\r\n     1.0,  1.0,  1.0,\r\n\r\n     1.0,  1.0,  1.0,\r\n    -1.0,  1.0,  1.0,\r\n    -1.0, -1.0,  1.0,\r\n\r\n    1.0,  1.0,  1.0,\r\n    1.0, -1.0,  1.0,\r\n    -1.0, -1.0,  1.0,\r\n] );\r\n\r\n\r\nconst uniforms = {\r\n    // phong material uniforms\r\n    Ka: { value: new THREE.Vector3(1, 1, 1) },\r\n    Kd: { value: new THREE.Vector3(1, 1, 1) },\r\n    Ks: { value: new THREE.Vector3(1, 1, 1) },\r\n    LightIntensity: { value: new THREE.Vector4(1, 0.5, 0.5, 1.0) },\r\n    LightPosition: { value: new THREE.Vector4(0.0, 2000.0, 0.0, 1.0) },\r\n    Shininess: { value: 200.0 }\r\n  }\r\n\r\n\r\n\r\n  const fragmentShader = `\r\n    varying vec3 Normal;\r\n    varying vec3 Position;\r\n\r\n    uniform vec3 Ka;\r\n    uniform vec3 Kd;\r\n    uniform vec3 Ks;\r\n    uniform vec4 LightPosition;\r\n    uniform vec3 LightIntensity;\r\n    uniform float Shininess;\r\n\r\n    vec3 phong() {\r\n      vec3 n = normalize(Normal);\r\n      vec3 s = normalize(vec3(LightPosition) - Position);\r\n      vec3 v = normalize(vec3(-Position));\r\n      vec3 r = reflect(-s, n);\r\n\r\n      vec3 ambient = Ka;\r\n      vec3 diffuse = Kd * max(dot(s, n), 0.0);\r\n      vec3 specular = Ks * pow(max(dot(r, v), 0.0), Shininess);\r\n\r\n      return LightIntensity * (ambient + diffuse + specular);\r\n    }\r\n\r\n    void main() {\r\n      vec3 blue = vec3(0.0, 1.0, 0.0);\r\n      gl_FragColor = vec4(blue*phong(), 1.0);\r\n  }`\r\n  const vertexShader = `\r\n    varying vec3 Normal;\r\n    varying vec3 Position;\r\n\r\n    void main() {\r\n      Normal = normalize(normalMatrix * normal);\r\n      Position = vec3(modelViewMatrix * vec4(position, 1.0));\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n    }\r\n  `  \r\n\r\n  const color_vertices = new Float32Array([\r\n    1.0 , 1.0 , 0.0 ,1,\r\n    1.0 , 1.0 , 0.5 ,1, \r\n    1.0 , 0.0 , 1.0 ,1,\r\n\r\n    1.0 , 1.0 , 0.0 ,1,\r\n    1.0 , 0.5 , 0.0 ,1, \r\n    1.0 , 0.0 , 1.0 ,1,\r\n        \r\n    1.0 , 1.0 , 0.0 ,1,\r\n    1.0 , 0.5 , 0.0 ,1, \r\n    1.0 , 0.0 , 1.0 ,1,\r\n  ]);\r\n\r\n  const meshMaterial = new THREE.MeshStandardMaterial({ map : loadedTexture, color : 'red' });\r\n\r\n  return (\r\n\r\n<Container>\r\n  <Canvas shadows style={{ position: \"relative\", width: 750, height: 750 }}  gl={{ antialias: false }}>\r\n  <ambientLight intensity={0.9} />\r\n\r\n  <directionalLight \r\n  castShadow\r\n  position={[9, 9, 9]} \r\n  intensity={1.9}  \r\n  shadow-mapSize-width={1024}\r\n  shadow-mapSize-height={1024}\r\n  shadow-camera-far={100}\r\n  shadow-camera-left={-15}\r\n  shadow-camera-right={15}\r\n  shadow-camera-top={20}\r\n  shadow-camera-bottom={-10}\r\n\r\n  />\r\n\r\n  <OrbitControls enableZoom = {true} />\r\n  <Suspense fallback={null}>\r\n\r\n    {/*Generate scene here: */}\r\n    {/*bottom: */}\r\n\r\n    <mesh castShadow receiveShadow position={[1,1,1]}\r\n    material={meshMaterial} computeVertexNormals=\"true\"\r\n    >\r\n    <bufferGeometry attach=\"geometry\" onUpdate={(self) => self.computeFaceNormals()}>\r\n      <bufferAttribute attachObject={['attributes', 'position']} \r\n      array={vertices}\r\n      itemSize={3}\r\n      count={9}\r\n      computeVertexNormals=\"true\"\r\n      />\r\n    </bufferGeometry>\r\n    <shaderMaterial map={loadedTexture} receiveShadow attach=\"material\" uniforms={uniforms} fragmentShader={fragmentShader} vertexShader={vertexShader} />\r\n    {/* <meshStandardMaterial attach=\"material\" color=\"green\"  /> */}\r\n    {/* <meshStandardMaterial attach=\"material\"/> */}\r\n    </mesh>\r\n\r\n    <mesh castShadow receiveShadow position={[1,1,1.5]} computeVertexNormals=\"true\">\r\n    <bufferGeometry attach=\"geometry\" args={[1,1,1]}  >\r\n      <bufferAttribute attachObject={['attributes', 'position']}\r\n      array={vertices}\r\n      itemSize={3}\r\n      count={9}\r\n      />\r\n    </bufferGeometry>\r\n    {/* <meshStandardMaterial attach=\"material\" color=\"green\"  /> */}\r\n    <shaderMaterial attach=\"material\" \r\n      />\r\n    </mesh>\r\n\r\n    \r\n\r\n    {/* top */}\r\n\r\n\r\n    <DisplayPlane/>\r\n\r\n    </Suspense>\r\n  </Canvas>\r\n</Container>\r\n);}\r\n\r\nexport default View"]},"metadata":{},"sourceType":"module"}