{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\Documents\\\\GitHub\\\\build-viewer\\\\frontend\\\\src\\\\components\\\\View.js\",\n    _this = this;\n\nimport React, { Suspense, useMemo } from 'react';\nimport Input from 'react-bootstrap/InputGroup';\nimport * as THREE from 'three';\nimport { Canvas, useLoader } from \"@react-three/fiber\";\nimport { OrbitControls, softShadows } from \"@react-three/drei\";\nimport { TextureLoader } from \"three/src/loaders/TextureLoader\";\nimport { Container } from \"react-bootstrap\";\nimport Box from './Box';\nimport TexturePlane from './TexturePlane';\nimport DisplayPlane from './DisplayPlane';\nimport textureMap from '../images/blocks/tnt_side.png';\nimport { BufferAttribute, MeshBasicMaterial, MeshStandardMaterial } from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nsoftShadows();\n\nvar View = function View(props) {\n  var quad_vertices = [-30.0, 30.0, 0.0, 30.0, 30.0, 0.0, 30.0, -30.0, 0.0, -30.0, -30.0, 0.0];\n  var quad_uvs = [0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0];\n  var quad_indices = [0, 2, 1, 0, 3, 2];\n  var geometry = new THREE.BufferGeometry();\n  var vertices = new Float32Array(quad_vertices); // Each vertex has one uv coordinate for texture mapping\n\n  var uvs = new Float32Array(quad_uvs); // Use the four vertices to draw the two triangles that make up the square.\n\n  var indices = new Uint32Array(quad_indices); // itemSize = 3 because there are 3 values (components) per vertex\n\n  geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n  geometry.setAttribute('uv', new THREE.BufferAttribute(uvs, 2));\n  geometry.setIndex(new THREE.BufferAttribute(indices, 1));\n  geometry.computeVertexNormals(); // Load the texture asynchronously\n\n  var sprite = new THREE.TextureLoader().load(textureMap);\n  sprite.minFilter = THREE.NearestFilter;\n  sprite.magFilter = THREE.NearestFilter;\n  var material = new THREE.MeshStandardMaterial({\n    map: sprite\n  });\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      shadows: true,\n      style: {\n        position: \"relative\",\n        width: 750,\n        height: 750\n      },\n      gl: {\n        antialias: false\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n        intensity: 0.9\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 3\n      }, _this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n        castShadow: true,\n        position: [9, 9, 9],\n        intensity: 1.9,\n        \"shadow-mapSize-width\": 1024,\n        \"shadow-mapSize-height\": 1024,\n        \"shadow-camera-far\": 100,\n        \"shadow-camera-left\": -15,\n        \"shadow-camera-right\": 15,\n        \"shadow-camera-top\": 20,\n        \"shadow-camera-bottom\": -10\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 3\n      }, _this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n        enableZoom: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 3\n      }, _this), /*#__PURE__*/_jsxDEV(Suspense, {\n        fallback: null,\n        children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n          castShadow: true,\n          receiveShadow: true,\n          position: [1, 1, 1],\n          computeVertexNormals: \"true\",\n          children: /*#__PURE__*/_jsxDEV(\"bufferGeometry\", {\n            attach: \"geometry\",\n            children: /*#__PURE__*/_jsxDEV(\"bufferAttribute\", {\n              attachObject: ['attributes', 'position'],\n              array: vertices,\n              itemSize: 3,\n              count: 9\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 7\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 5\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 3\n        }, _this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n          geometry: geometry,\n          material: material,\n          castShadow: true,\n          receiveShadow: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 5\n        }, _this), /*#__PURE__*/_jsxDEV(DisplayPlane, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 5\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 3\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 3\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 1\n  }, _this);\n};\n\n_c = View;\nexport default View;\n\nvar _c;\n\n$RefreshReg$(_c, \"View\");","map":{"version":3,"sources":["C:/Users/jason/Documents/GitHub/build-viewer/frontend/src/components/View.js"],"names":["React","Suspense","useMemo","Input","THREE","Canvas","useLoader","OrbitControls","softShadows","TextureLoader","Container","Box","TexturePlane","DisplayPlane","textureMap","BufferAttribute","MeshBasicMaterial","MeshStandardMaterial","View","props","quad_vertices","quad_uvs","quad_indices","geometry","BufferGeometry","vertices","Float32Array","uvs","indices","Uint32Array","setAttribute","setIndex","computeVertexNormals","sprite","load","minFilter","NearestFilter","magFilter","material","map","position","width","height","antialias"],"mappings":"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","sourcesContent":["import React, { Suspense, useMemo } from 'react'\r\nimport Input from 'react-bootstrap/InputGroup'\r\n\r\nimport * as THREE from 'three'\r\nimport { Canvas, useLoader} from \"@react-three/fiber\";\r\nimport { OrbitControls, softShadows } from \"@react-three/drei\";\r\n\r\nimport { TextureLoader } from \"three/src/loaders/TextureLoader\";\r\n\r\n\r\nimport {Container} from \"react-bootstrap\";\r\nimport Box from './Box';\r\nimport TexturePlane from './TexturePlane';\r\nimport DisplayPlane from './DisplayPlane';\r\nimport textureMap from '../images/blocks/tnt_side.png';\r\nimport { BufferAttribute, MeshBasicMaterial, MeshStandardMaterial } from 'three';\r\n\r\nsoftShadows()\r\n\r\nconst View = (props) => {\r\n\r\n  var quad_vertices =\r\n  [\r\n  -30.0,  30.0, 0.0,\r\n  30.0,  30.0, 0.0,\r\n  30.0, -30.0, 0.0,\r\n  -30.0, -30.0, 0.0,\r\n  ];\r\n  \r\n  var quad_uvs =\r\n  [\r\n  0.0, 1.0,\r\n  1.0, 1.0,\r\n  1.0, 0.0,\r\n  0.0, 0.0\r\n  ];\r\n  \r\n\r\n  var quad_indices =\r\n  [\r\n  0, 2, 1, 0, 3, 2\r\n  ];\r\n\r\nvar geometry = new THREE.BufferGeometry();\r\n\r\nvar vertices = new Float32Array( quad_vertices );\r\n// Each vertex has one uv coordinate for texture mapping\r\nvar uvs = new Float32Array( quad_uvs);\r\n// Use the four vertices to draw the two triangles that make up the square.\r\nvar indices = new Uint32Array( quad_indices )\r\n\r\n// itemSize = 3 because there are 3 values (components) per vertex\r\ngeometry.setAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\r\ngeometry.setAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\r\ngeometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\ngeometry.computeVertexNormals();\r\n\r\n// Load the texture asynchronously\r\nlet sprite = new THREE.TextureLoader().load(textureMap);\r\nsprite.minFilter = THREE.NearestFilter;\r\nsprite.magFilter = THREE.NearestFilter;\r\n\r\nvar material = new THREE.MeshStandardMaterial( {map: sprite });\r\n\r\n\r\n  return (\r\n\r\n<Container>\r\n  <Canvas shadows style={{ position: \"relative\", width: 750, height: 750 }}  gl={{ antialias: false }}>\r\n  <ambientLight intensity={0.9} />\r\n\r\n  <directionalLight \r\n  castShadow\r\n  position={[9, 9, 9]} \r\n  intensity={1.9}  \r\n  shadow-mapSize-width={1024}\r\n  shadow-mapSize-height={1024}\r\n  shadow-camera-far={100}\r\n  shadow-camera-left={-15}\r\n  shadow-camera-right={15}\r\n  shadow-camera-top={20}\r\n  shadow-camera-bottom={-10}\r\n\r\n  />\r\n\r\n  {/* Actual Scene here: */}\r\n  <OrbitControls enableZoom = {true} />\r\n  <Suspense fallback={null}>\r\n\r\n    \r\n  <mesh castShadow receiveShadow position={[1,1,1]} computeVertexNormals=\"true\"\r\n    >\r\n    <bufferGeometry attach=\"geometry\" >\r\n      <bufferAttribute attachObject={['attributes', 'position']} \r\n      array={vertices}\r\n      itemSize={3}\r\n      count={9}\r\n      />\r\n    </bufferGeometry>\r\n    {/* <meshStandardMaterial attach=\"material\" color=\"green\"  /> */}\r\n    {/* <meshStandardMaterial attach=\"material\"/> */}\r\n    </mesh>\r\n\r\n    <mesh geometry={geometry} material={material} castShadow receiveShadow>\r\n\r\n    </mesh>\r\n\r\n    <DisplayPlane/>\r\n\r\n    </Suspense>\r\n\r\n  </Canvas>\r\n</Container>\r\n);}\r\n\r\nexport default View"]},"metadata":{},"sourceType":"module"}