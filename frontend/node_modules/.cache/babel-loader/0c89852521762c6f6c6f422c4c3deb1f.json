{"ast":null,"code":"import _slicedToArray from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\jason\\\\Documents\\\\GitHub\\\\build-viewer\\\\frontend\\\\src\\\\components\\\\Upload.js\",\n    _this = this;\n\nimport React from 'react';\nimport { Container } from \"react-bootstrap\";\nimport NavbarToggle from 'react-bootstrap/esm/NavbarToggle';\nimport nbt from '../nbt';\nimport View from './View';\nimport TexturePlane from './TexturePlane';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Upload = function Upload() {\n  // handleUpload = (event) => {\n  //     console.log('Success!');\n  // }\n  var blockState = [];\n\n  function renderHandler() {\n    if (!blockState) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Nothing is rendered..\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 11\n      }, this);\n    } else {\n      /*#__PURE__*/\n      _jsxDEV(View, {\n        top: topRender\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  function blockStructure(palette, pValue) {\n    var BlockType = palette[pValue];\n\n    if (BlockType.Name.value == 'minecraft:air') {\n      return {\n        'name': '',\n        'cube': false\n      };\n    }\n\n    if (BlockType.Properties) {\n      return {\n        'name': BlockType.Name.value,\n        'cube': false,\n        'special': BlockType.Properties.value\n      };\n    } else {\n      return {\n        'name': BlockType.Name.value,\n        'cube': true\n      };\n    }\n  }\n\n  function findBlock(x, y, z, data, palette) {\n    //console.log(data[0].pos.value.value);\n    var _iterator = _createForOfIteratorHelper(data.entries()),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n            i = _step$value[0],\n            v = _step$value[1];\n\n        var BlockArray = data[i].pos.value.value;\n\n        if (BlockArray[0] == x && BlockArray[1] == y && BlockArray[2] == z) {\n          return blockStructure(palette, data[i].state.value);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  function parseNBT(input) {\n    console.log('Parsing...');\n    var dump = {\n      author: \"\",\n      dimension: {\n        x: 0,\n        y: 0,\n        z: 0\n      },\n      blocks: [] //blocks[x][y][z]\n\n    }; // const BlockList = input.value.blocks.value.value;\n    // BlockPositionArray = input.value.blocks.value.value.pos.value.value;\n    //Block palette:\n\n    var palette = input.value.palette.value.value;\n    console.log(palette); //First Pass\n\n    var _iterator2 = _createForOfIteratorHelper(input.value.blocks.value.value),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var block = _step2.value;\n        console.log(block); //The [ x, y, z ] Array\n\n        var blockArray = block.pos.value.value;\n\n        if (blockArray[0] > dump.dimension.x) {\n          dump.dimension.x = blockArray[0];\n        } //y\n\n\n        if (blockArray[1] > dump.dimension.y) {\n          dump.dimension.y = blockArray[1];\n        } //z\n\n\n        if (blockArray[2] > dump.dimension.z) {\n          dump.dimension.z = blockArray[2];\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    dump.dimension.x++;\n    dump.dimension.y++;\n    dump.dimension.z++; //( +1 to each axis after loop )\n\n    console.log(dump.dimension); //Generating 3d Array Structure: \n\n    for (var x_i = 0; x_i < dump.dimension.x; x_i++) {\n      //Generate all x indexes\n      dump.blocks.push([]); //Generate all y indexes within x indexes\n\n      for (var y_i = 0; y_i < dump.dimension.y; y_i++) {\n        dump.blocks[x_i].push([]); //Generate z indexes within y indexes\n\n        for (var z_i = 0; z_i < dump.dimension.z; z_i++) {\n          dump.blocks[x_i][y_i].push(findBlock(x_i, y_i, z_i, input.value.blocks.value.value, palette));\n        }\n      }\n    }\n\n    console.log(' 3D structure: ');\n    console.log(dump.blocks); //Generate planes:\n\n    var _iterator3 = _createForOfIteratorHelper(dump.blocks.entries()),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var _step3$value = _slicedToArray(_step3.value, 2),\n            xIter = _step3$value[0],\n            xVal = _step3$value[1];\n\n        console.log(xIter); //Console logs all x arrays\n\n        var _iterator4 = _createForOfIteratorHelper(xVal.entries()),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var _step4$value = _slicedToArray(_step4.value, 2),\n                yIter = _step4$value[0],\n                yVal = _step4$value[1];\n\n            console.log(yIter);\n\n            var _iterator5 = _createForOfIteratorHelper(yVal.entries()),\n                _step5;\n\n            try {\n              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                var _step5$value = _slicedToArray(_step5.value, 2),\n                    zIter = _step5$value[0],\n                    zVal = _step5$value[1];\n\n                //This will be the logic for rendering:\n                //Surrounding block coord differences: xyz 012\n                var surround = [[0, 1], [0, -1], [1, 1], [1, -1], [2, 1], [2, -1]];\n                console.log('viewing: ');\n                console.log(zVal.name + \"@\" + xIter + ' ' + yIter + ' ' + zIter);\n\n                for (var k = 0; k < surround.length; k++) {\n                  //do something\n                  if (surround[k][0] == 0) {\n                    //Looking at x\n                    var compare = '';\n\n                    try {\n                      compare = dump.blocks[xIter + surround[k][1]][yIter][zIter];\n                    } catch (error) {\n                      console.log('Render NULL');\n                    }\n\n                    if (!compare || compare.cube == false) {\n                      //Render for x\n                      console.log('Rendering x @' + surround[k][1] + ' x' + xIter + ' y' + yIter + ' z' + zIter);\n                    }\n                  }\n                }\n              } // end of z loop\n\n            } catch (err) {\n              _iterator5.e(err);\n            } finally {\n              _iterator5.f();\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      } // for(const block of input.value.blocks.value.value){\n      //   console.log(block.pos.value.value);\n      //   console.log(block.state.value);\n      // }\n\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n\n  function handleChange(event) {\n    console.log(event.target.files); // console.log(event.target.files[0]); //file struc\n\n    var file = event.target.files[0];\n    var reader = new FileReader();\n\n    reader.onload = function (e) {\n      console.log(e.target.result);\n      var x = nbt.parse(e.target.result, function (error, data) {\n        if (error) {\n          throw error;\n        }\n\n        console.log(data);\n        parseNBT(data);\n      });\n    };\n\n    reader.readAsArrayBuffer(file);\n  }\n\n  var topRender = [/*#__PURE__*/_jsxDEV(TexturePlane, {\n    x: 0,\n    y: 6,\n    z: 0,\n    rot: [Math.PI / 2, 0, 0]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, _this), /*#__PURE__*/_jsxDEV(TexturePlane, {\n    x: 0,\n    y: 6,\n    z: 6,\n    rot: [-Math.PI / 2, 0, 0]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, _this), /*#__PURE__*/_jsxDEV(TexturePlane, {\n    x: 6,\n    y: 6,\n    z: 0,\n    rot: [0, -Math.PI / 2, 0]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, _this), /*#__PURE__*/_jsxDEV(TexturePlane, {\n    x: 12,\n    y: 6,\n    z: 0,\n    rot: [0, Math.PI / 2, 0]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, _this), /*#__PURE__*/_jsxDEV(TexturePlane, {\n    x: 12,\n    y: 6,\n    z: 6,\n    rot: [0, 0, -Math.PI / 2]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, _this)];\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [\"Input NBT file \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 20\n    }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 5\n    }, _this), /*#__PURE__*/_jsxDEV(View, {\n      top: topRender\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 5\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 217,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = Upload;\nexport default Upload;\n\nvar _c;\n\n$RefreshReg$(_c, \"Upload\");","map":{"version":3,"sources":["C:/Users/jason/Documents/GitHub/build-viewer/frontend/src/components/Upload.js"],"names":["React","Container","NavbarToggle","nbt","View","TexturePlane","Upload","blockState","renderHandler","topRender","blockStructure","palette","pValue","BlockType","Name","value","Properties","findBlock","x","y","z","data","entries","i","v","BlockArray","pos","state","parseNBT","input","console","log","dump","author","dimension","blocks","block","blockArray","x_i","push","y_i","z_i","xIter","xVal","yIter","yVal","zIter","zVal","surround","name","k","length","compare","error","cube","handleChange","event","target","files","file","reader","FileReader","onload","e","result","parse","readAsArrayBuffer","Math","PI"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {Container} from \"react-bootstrap\";\r\nimport NavbarToggle from 'react-bootstrap/esm/NavbarToggle';\r\nimport nbt from '../nbt';\r\nimport View from './View';\r\nimport TexturePlane from './TexturePlane';\r\n\r\nconst Upload = () => {\r\n\r\n    // handleUpload = (event) => {\r\n    //     console.log('Success!');\r\n    // }\r\n\r\n    let blockState = [];\r\n\r\n    function renderHandler(){\r\n      if(!blockState){\r\n        return(\r\n          <div>\r\n            Nothing is rendered..\r\n          </div>\r\n        )\r\n      } else {\r\n        <View top={topRender}/>\r\n      }\r\n    }\r\n\r\n\r\n    function blockStructure(palette, pValue){\r\n      const BlockType = palette[pValue];\r\n\r\n      if(BlockType.Name.value == 'minecraft:air'){\r\n        return {'name' : '', 'cube': false};\r\n      }\r\n\r\n      if(BlockType.Properties){\r\n\r\n        return {\r\n          'name' : BlockType.Name.value,\r\n          'cube' : false,\r\n          'special' : BlockType.Properties.value\r\n        };\r\n\r\n      } else {\r\n\r\n        return {\r\n          'name' : BlockType.Name.value,\r\n          'cube' : true\r\n        };\r\n\r\n      }\r\n    }\r\n\r\n    function findBlock(x,y,z,data,palette){\r\n      //console.log(data[0].pos.value.value);\r\n      for(const [i, v] of data.entries()){\r\n        const BlockArray = data[i].pos.value.value;\r\n        if(BlockArray[0] == x && BlockArray[1] == y && BlockArray[2] == z){\r\n          return blockStructure(palette,data[i].state.value);\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n\r\n    function parseNBT(input) {\r\n      console.log('Parsing...');\r\n\r\n      let dump = {\r\n        author: \"\",\r\n        dimension: {x:0,y:0,z:0}, \r\n        blocks: [] //blocks[x][y][z]\r\n      }\r\n\r\n      // const BlockList = input.value.blocks.value.value;\r\n      // BlockPositionArray = input.value.blocks.value.value.pos.value.value;\r\n\r\n      //Block palette:\r\n      let palette = input.value.palette.value.value;\r\n      console.log(palette);\r\n\r\n      //First Pass\r\n      for(const block of input.value.blocks.value.value){ \r\n\r\n        console.log(block);\r\n\r\n        //The [ x, y, z ] Array\r\n        var blockArray = block.pos.value.value;\r\n\r\n        if(blockArray[0] > dump.dimension.x){\r\n          dump.dimension.x = blockArray[0]; \r\n        }\r\n        //y\r\n        if(blockArray[1] > dump.dimension.y){\r\n          dump.dimension.y = blockArray[1]; \r\n        }\r\n        //z\r\n        if(blockArray[2] > dump.dimension.z){\r\n          dump.dimension.z = blockArray[2]; \r\n        }\r\n\r\n      }\r\n      dump.dimension.x++; dump.dimension.y++; dump.dimension.z++; //( +1 to each axis after loop )\r\n\r\n      console.log(dump.dimension)\r\n\r\n      //Generating 3d Array Structure: \r\n\r\n      for(let x_i = 0; x_i < dump.dimension.x; x_i++ ){\r\n\r\n        //Generate all x indexes\r\n        dump.blocks.push([]);\r\n        \r\n        //Generate all y indexes within x indexes\r\n        for(let y_i = 0; y_i < dump.dimension.y; y_i++){\r\n          dump.blocks[x_i].push([]);\r\n\r\n            //Generate z indexes within y indexes\r\n            for(let z_i = 0; z_i < dump.dimension.z; z_i++){\r\n              dump.blocks[x_i][y_i].push(\r\n              findBlock(x_i,y_i,z_i,input.value.blocks.value.value,palette)\r\n              );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        \r\n\r\n      }\r\n\r\n      console.log(' 3D structure: ')\r\n      console.log(dump.blocks)\r\n\r\n      //Generate planes:\r\n      for(const [xIter, xVal] of dump.blocks.entries()) {\r\n        console.log(xIter); //Console logs all x arrays\r\n        for(const [yIter,yVal] of xVal.entries()){\r\n          console.log(yIter);\r\n            for(const [zIter, zVal] of yVal.entries()){\r\n        //This will be the logic for rendering:\r\n        \r\n        //Surrounding block coord differences: xyz 012\r\n        const surround = [ [0,1] , [0,-1] , [1,1] , [1,-1] , [2,1] , [2,-1] ];\r\n\r\n        console.log('viewing: ');\r\n        console.log(zVal.name + \"@\"+xIter+' '+yIter+' '+zIter);\r\n\r\n          for(let k = 0; k < surround.length; k++){\r\n            //do something\r\n            \r\n            if(surround[k][0] == 0 ){ //Looking at x\r\n              let compare = '';\r\n              try {\r\n                compare = dump.blocks[ xIter+surround[k][1] ][yIter][zIter];\r\n              } catch(error){\r\n                console.log('Render NULL');\r\n              }\r\n\r\n              if(!compare || compare.cube == false ){\r\n                //Render for x\r\n                console.log('Rendering x @'+surround[k][1]+ ' x'+xIter+' y'+yIter+' z'+zIter);\r\n\r\n              }\r\n            }\r\n            \r\n            \r\n\r\n\r\n\r\n          }\r\n\r\n            } // end of z loop\r\n\r\n        }\r\n\r\n      }\r\n\r\n\r\n      // for(const block of input.value.blocks.value.value){\r\n      //   console.log(block.pos.value.value);\r\n      //   console.log(block.state.value);\r\n      // }\r\n    }\r\n\r\n    \r\n    function handleChange(event) {\r\n        console.log(event.target.files);\r\n        // console.log(event.target.files[0]); //file struc\r\n        const file = event.target.files[0];\r\n        var reader = new FileReader();\r\n        reader.onload = (e) => {\r\n\r\n            console.log(e.target.result);\r\n\r\n\r\n            var x = nbt.parse(e.target.result, function(error, data) {\r\n              if (error) { throw error; }\r\n          \r\n              console.log(data);\r\n              parseNBT(data);\r\n          });\r\n\r\n        }\r\n        reader.readAsArrayBuffer(file);\r\n    }\r\n\r\n  const topRender = [\r\n    <TexturePlane x={0} y={6} z={0} rot={[Math.PI / 2, 0, 0]}/>,\r\n    <TexturePlane x={0} y={6} z={6} rot={[-Math.PI / 2, 0, 0]}/>,\r\n    <TexturePlane x={6} y={6} z={0} rot={[0, -Math.PI / 2, 0]}/>,\r\n    <TexturePlane x={12} y={6} z={0} rot={[0, Math.PI / 2, 0]}/>,\r\n    <TexturePlane x={12} y={6} z={6} rot={[0, 0, -Math.PI / 2]}/>\r\n  ]\r\n\r\n  return (\r\n    <Container>\r\n    Input NBT file <br/>\r\n    <input type=\"file\" onChange={handleChange}></input>\r\n    <View top={topRender}/>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Upload"]},"metadata":{},"sourceType":"module"}