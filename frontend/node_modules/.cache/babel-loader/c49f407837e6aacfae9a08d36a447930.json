{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Node from './Node.js';\n\nvar CodeNode = /*#__PURE__*/function (_Node) {\n  _inherits(CodeNode, _Node);\n\n  var _super = _createSuper(CodeNode);\n\n  function CodeNode() {\n    var _this;\n\n    var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var nodeType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'code';\n\n    _classCallCheck(this, CodeNode);\n\n    _this = _super.call(this, nodeType);\n    _this.code = code;\n    _this._includes = [];\n    return _this;\n  }\n\n  _createClass(CodeNode, [{\n    key: \"setIncludes\",\n    value: function setIncludes(includes) {\n      this._includes = includes;\n      return this;\n    }\n  }, {\n    key: \"getIncludes\",\n    value: function getIncludes() {\n      return this._includes;\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder) {\n      var includes = this.getIncludes(builder);\n\n      var _iterator = _createForOfIteratorHelper(includes),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var include = _step.value;\n          include.build(builder);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var nodeCode = builder.getCodeFromNode(this, this.getNodeType(builder));\n      nodeCode.code = this.code;\n      return nodeCode.code;\n    }\n  }]);\n\n  return CodeNode;\n}(Node);\n\nCodeNode.prototype.isCodeNode = true;\nexport default CodeNode;","map":{"version":3,"sources":["C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/three-stdlib/nodes/core/CodeNode.js"],"names":["Node","CodeNode","code","nodeType","_includes","includes","builder","getIncludes","include","build","nodeCode","getCodeFromNode","getNodeType","prototype","isCodeNode"],"mappings":";;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;;IAEMC,Q;;;;;AACJ,sBAA0C;AAAA;;AAAA,QAA9BC,IAA8B,uEAAvB,EAAuB;AAAA,QAAnBC,QAAmB,uEAAR,MAAQ;;AAAA;;AACxC,8BAAMA,QAAN;AACA,UAAKD,IAAL,GAAYA,IAAZ;AACA,UAAKE,SAAL,GAAiB,EAAjB;AAHwC;AAIzC;;;;WAED,qBAAYC,QAAZ,EAAsB;AACpB,WAAKD,SAAL,GAAiBC,QAAjB;AACA,aAAO,IAAP;AACD;;;WAED,uBAAc;AACZ,aAAO,KAAKD,SAAZ;AACD;;;WAED,kBAASE,OAAT,EAAkB;AAChB,UAAMD,QAAQ,GAAG,KAAKE,WAAL,CAAiBD,OAAjB,CAAjB;;AADgB,iDAGMD,QAHN;AAAA;;AAAA;AAGhB,4DAAgC;AAAA,cAArBG,OAAqB;AAC9BA,UAAAA,OAAO,CAACC,KAAR,CAAcH,OAAd;AACD;AALe;AAAA;AAAA;AAAA;AAAA;;AAOhB,UAAMI,QAAQ,GAAGJ,OAAO,CAACK,eAAR,CAAwB,IAAxB,EAA8B,KAAKC,WAAL,CAAiBN,OAAjB,CAA9B,CAAjB;AACAI,MAAAA,QAAQ,CAACR,IAAT,GAAgB,KAAKA,IAArB;AACA,aAAOQ,QAAQ,CAACR,IAAhB;AACD;;;;EA1BoBF,I;;AA8BvBC,QAAQ,CAACY,SAAT,CAAmBC,UAAnB,GAAgC,IAAhC;AAEA,eAAeb,QAAf","sourcesContent":["import Node from './Node.js';\n\nclass CodeNode extends Node {\n  constructor(code = '', nodeType = 'code') {\n    super(nodeType);\n    this.code = code;\n    this._includes = [];\n  }\n\n  setIncludes(includes) {\n    this._includes = includes;\n    return this;\n  }\n\n  getIncludes() {\n    return this._includes;\n  }\n\n  generate(builder) {\n    const includes = this.getIncludes(builder);\n\n    for (const include of includes) {\n      include.build(builder);\n    }\n\n    const nodeCode = builder.getCodeFromNode(this, this.getNodeType(builder));\n    nodeCode.code = this.code;\n    return nodeCode.code;\n  }\n\n}\n\nCodeNode.prototype.isCodeNode = true;\n\nexport default CodeNode;\n"]},"metadata":{},"sourceType":"module"}