{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\Documents\\\\GitHub\\\\build-viewer\\\\frontend\\\\src\\\\components\\\\ViewV2.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { Suspense, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport Input from 'react-bootstrap/InputGroup';\nimport * as THREE from 'three';\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport { OrbitControls, softShadows } from \"@react-three/drei\";\nimport { TextureLoader } from \"three/src/loaders/TextureLoader\";\nimport { Container } from \"react-bootstrap\";\nimport Box from './Box';\nimport TexturePlane from './TexturePlane';\nimport DisplayPlane from './DisplayPlane';\nimport textureMap from '../images/blocks/stone.png';\nimport { BufferAttribute, MeshBasicMaterial, MeshStandardMaterial } from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nsoftShadows();\n\nvar ViewV2 = function ViewV2(props) {\n  _s();\n\n  //Ref setup:\n  var ref = useRef();\n  var geometryRef = useRef();\n  useFrame(function () {\n    return ref.current.rotation.x = ref.current.rotation.y += 0.01;\n  });\n  var fragmentShader = \"\\n   varying vec3 Normal;\\n   varying vec3 Position;\\n\\n   uniform vec3 Ka;\\n   uniform vec3 Kd;\\n   uniform vec3 Ks;\\n   uniform vec4 LightPosition;\\n   uniform vec3 LightIntensity;\\n   uniform float Shininess;\\n\\n   vec3 phong() {\\n     vec3 n = normalize(Normal);\\n     vec3 s = normalize(vec3(LightPosition) - Position);\\n     vec3 v = normalize(vec3(-Position));\\n     vec3 r = reflect(-s, n);\\n\\n     vec3 ambient = Ka;\\n     vec3 diffuse = Kd * max(dot(s, n), 0.0);\\n     vec3 specular = Ks * pow(max(dot(r, v), 0.0), Shininess);\\n\\n     return LightIntensity * (ambient + diffuse + specular);\\n   }\\n\\n   void main() {\\n     vec3 blue = vec3(0.0, 0.0, 1.0);\\n     gl_FragColor = vec4(blue*phong(), 1.0);\\n }\";\n  var vertexShader = \"\\n   varying vec3 Normal;\\n   varying vec3 Position;\\n\\n   void main() {\\n     Normal = normalize(normalMatrix * normal);\\n     Position = vec3(modelViewMatrix * vec4(position, 1.0));\\n     gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n   }\\n \";\n  var uniforms = {\n    // phong material uniforms\n    Ka: {\n      value: new THREE.Vector3(1, 1, 1)\n    },\n    Kd: {\n      value: new THREE.Vector3(1, 1, 1)\n    },\n    Ks: {\n      value: new THREE.Vector3(1, 1, 1)\n    },\n    LightIntensity: {\n      value: new THREE.Vector4(0.5, 0.5, 0.5, 1.0)\n    },\n    LightPosition: {\n      value: new THREE.Vector4(0.0, 2000.0, 0.0, 1.0)\n    },\n    Shininess: {\n      value: 200.0\n    }\n  };\n  var cubeVertices = [[-1, -1, 1], [1, -1, 1], [-1, 1, 1], [1, 1, 1], [-1, -1, -1], [1, -1, -1], [-1, 1, -1], [1, 1, -1]];\n  var cubeFaces = [[0, 3, 2], [0, 1, 3], [1, 7, 3], [1, 5, 7], [5, 6, 7], [5, 4, 6], [4, 2, 6], [4, 0, 2], [2, 7, 6], [2, 3, 7], [4, 1, 0], [4, 5, 1]]; //  const customCube = (\n  //    <geometry\n  //      ref={geometryRef}\n  //      attach=\"geometry\"\n  //      vertices={cubeVertices.map(v => new THREE.Vector3(...v))}\n  //      faces={cubeFaces.map(f => new THREE.Face3)}\n  //    />\n  //  )\n  // this will not work, throws an error but i can't find the error message\n  // customCube.computeFaceNormals()\n\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", {\n      ref: ref,\n      children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n        attach: \"geometry\",\n        args: [1, 1, 1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 6\n      }, _this), /*#__PURE__*/_jsxDEV(\"shaderMaterial\", {\n        attach: \"material\",\n        uniforms: uniforms,\n        fragmentShader: fragmentShader,\n        vertexShader: vertexShader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 6\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 4\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 6\n  }, _this);\n};\n\n_s(ViewV2, \"RlbT1+84VqmDfLZdFc6vPgZqFqs=\", false, function () {\n  return [useFrame];\n});\n\n_c = ViewV2;\nexport default ViewV2;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewV2\");","map":{"version":3,"sources":["C:/Users/jason/Documents/GitHub/build-viewer/frontend/src/components/ViewV2.js"],"names":["React","Suspense","useRef","ReactDOM","Input","THREE","Canvas","useFrame","OrbitControls","softShadows","TextureLoader","Container","Box","TexturePlane","DisplayPlane","textureMap","BufferAttribute","MeshBasicMaterial","MeshStandardMaterial","ViewV2","props","ref","geometryRef","current","rotation","x","y","fragmentShader","vertexShader","uniforms","Ka","value","Vector3","Kd","Ks","LightIntensity","Vector4","LightPosition","Shininess","cubeVertices","cubeFaces"],"mappings":"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","sourcesContent":["import React, { Suspense, useRef } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Input from 'react-bootstrap/InputGroup'\r\n\r\nimport * as THREE from 'three'\r\nimport { Canvas, useFrame} from \"@react-three/fiber\";\r\nimport { OrbitControls, softShadows } from \"@react-three/drei\";\r\n\r\nimport { TextureLoader } from \"three/src/loaders/TextureLoader\";\r\n\r\n\r\nimport {Container} from \"react-bootstrap\";\r\nimport Box from './Box';\r\nimport TexturePlane from './TexturePlane';\r\nimport DisplayPlane from './DisplayPlane';\r\nimport textureMap from '../images/blocks/stone.png';\r\nimport { BufferAttribute, MeshBasicMaterial, MeshStandardMaterial } from 'three';\r\n\r\nsoftShadows()\r\n\r\nconst ViewV2 = (props) => {\r\n\r\n //Ref setup:\r\n const ref = useRef();\r\n const geometryRef = useRef();\r\n useFrame(() => (ref.current.rotation.x = ref.current.rotation.y += 0.01))\r\n\r\n const fragmentShader = `\r\n   varying vec3 Normal;\r\n   varying vec3 Position;\r\n\r\n   uniform vec3 Ka;\r\n   uniform vec3 Kd;\r\n   uniform vec3 Ks;\r\n   uniform vec4 LightPosition;\r\n   uniform vec3 LightIntensity;\r\n   uniform float Shininess;\r\n\r\n   vec3 phong() {\r\n     vec3 n = normalize(Normal);\r\n     vec3 s = normalize(vec3(LightPosition) - Position);\r\n     vec3 v = normalize(vec3(-Position));\r\n     vec3 r = reflect(-s, n);\r\n\r\n     vec3 ambient = Ka;\r\n     vec3 diffuse = Kd * max(dot(s, n), 0.0);\r\n     vec3 specular = Ks * pow(max(dot(r, v), 0.0), Shininess);\r\n\r\n     return LightIntensity * (ambient + diffuse + specular);\r\n   }\r\n\r\n   void main() {\r\n     vec3 blue = vec3(0.0, 0.0, 1.0);\r\n     gl_FragColor = vec4(blue*phong(), 1.0);\r\n }`\r\n const vertexShader = `\r\n   varying vec3 Normal;\r\n   varying vec3 Position;\r\n\r\n   void main() {\r\n     Normal = normalize(normalMatrix * normal);\r\n     Position = vec3(modelViewMatrix * vec4(position, 1.0));\r\n     gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n   }\r\n `\r\n const uniforms = {\r\n   // phong material uniforms\r\n   Ka: { value: new THREE.Vector3(1, 1, 1) },\r\n   Kd: { value: new THREE.Vector3(1, 1, 1) },\r\n   Ks: { value: new THREE.Vector3(1, 1, 1) },\r\n   LightIntensity: { value: new THREE.Vector4(0.5, 0.5, 0.5, 1.0) },\r\n   LightPosition: { value: new THREE.Vector4(0.0, 2000.0, 0.0, 1.0) },\r\n   Shininess: { value: 200.0 }\r\n }\r\n\r\n const cubeVertices = [[-1, -1, 1], [1, -1, 1], [-1, 1, 1], [1, 1, 1], [-1, -1, -1], [1, -1, -1], [-1, 1, -1], [1, 1, -1]]\r\n\r\n const cubeFaces = [\r\n   [0, 3, 2],\r\n   [0, 1, 3],\r\n   [1, 7, 3],\r\n   [1, 5, 7],\r\n   [5, 6, 7],\r\n   [5, 4, 6],\r\n   [4, 2, 6],\r\n   [4, 0, 2],\r\n   [2, 7, 6],\r\n   [2, 3, 7],\r\n   [4, 1, 0],\r\n   [4, 5, 1]\r\n ]\r\n\r\n//  const customCube = (\r\n//    <geometry\r\n//      ref={geometryRef}\r\n//      attach=\"geometry\"\r\n//      vertices={cubeVertices.map(v => new THREE.Vector3(...v))}\r\n//      faces={cubeFaces.map(f => new THREE.Face3)}\r\n//    />\r\n//  )\r\n\r\n // this will not work, throws an error but i can't find the error message\r\n // customCube.computeFaceNormals()\r\n\r\n return (\r\n     <Canvas>\r\n   <mesh ref={ref}>\r\n     <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\r\n     {/* {customCube} */}\r\n     <shaderMaterial attach=\"material\" uniforms={uniforms} fragmentShader={fragmentShader} vertexShader={vertexShader} />\r\n   </mesh>\r\n   </Canvas>\r\n )\r\n}\r\n\r\nexport default ViewV2"]},"metadata":{},"sourceType":"module"}