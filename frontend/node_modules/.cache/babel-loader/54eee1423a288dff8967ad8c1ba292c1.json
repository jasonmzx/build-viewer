{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\jason\\\\Documents\\\\GitHub\\\\build-viewer\\\\frontend\\\\src\\\\components\\\\Upload.js\",\n    _this = this;\n\nimport React from 'react';\nimport { Container } from \"react-bootstrap\";\nimport NavbarToggle from 'react-bootstrap/esm/NavbarToggle';\nimport nbt from '../nbt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Upload = function Upload() {\n  // handleUpload = (event) => {\n  //     console.log('Success!');\n  // }\n  function findBlock(x, y, z, data) {\n    console.log(data[0].pos.value.value);\n    var BlockArray = data[0].pos.value.value;\n\n    if (BlockArray[0] == x && BlockArray[1] == y && BlockArray[2] == z) {} // for(const block of data){\n    //data.state.value\n    // if()\n\n  }\n\n  function parseNBT(input) {\n    console.log('Parsing...');\n    var dump = {\n      author: \"\",\n      dimension: {\n        x: 0,\n        y: 0,\n        z: 0\n      },\n      blocks: [//blocks[x][y][z]\n        //   [ [ [] /*z*/ ] /*y*/  ] /*x*/\n      ]\n    }; //  console.log(input['value']['blocks']['value']['value']) //Block Array\n    // const BlockList = input.value.blocks.value.value;\n    // BlockPositionArray = input.value.blocks.value.value.pos.value.value;\n    //First Pass\n\n    var _iterator = _createForOfIteratorHelper(input.value.blocks.value.value),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var block = _step.value;\n        //The [ x, y, z ] Array\n        var blockArray = block.pos.value.value;\n\n        if (blockArray[0] > dump.dimension.x) {\n          dump.dimension.x = blockArray[0];\n        } //y\n\n\n        if (blockArray[1] > dump.dimension.y) {\n          dump.dimension.y = blockArray[1];\n        } //z\n\n\n        if (blockArray[2] > dump.dimension.z) {\n          dump.dimension.z = blockArray[2];\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    dump.dimension.x++;\n    dump.dimension.y++;\n    dump.dimension.z++; //( +1 to each axis after loop )\n\n    console.log(dump.dimension);\n    console.log(findBlock(0, 0, 0, input.value.blocks.value.value)); //Generating 3d Array Structure: \n\n    for (var x_i = 0; x_i < dump.dimension.x; x_i++) {\n      //Generate all x indexes\n      dump.blocks.push([]); //Generate all y indexes within x indexes\n\n      for (var y_i = 0; y_i < dump.dimension.y; y_i++) {\n        dump.blocks[x_i].push([]); //Generate z indexes within y indexes\n\n        for (var z_i = 0; z_i < dump.dimension.z; z_i++) {\n          dump.blocks[x_i][y_i].push({\n            //Object\n            'name': '0',\n            'isBlock': true,\n            'direction': null\n          });\n        }\n      }\n    }\n\n    console.log(dump.blocks); // for(const block of input.value.blocks.value.value){\n    //   console.log(block.pos.value.value);\n    //   console.log(block.state.value);\n    // }\n  }\n\n  function handleChange(event) {\n    console.log(event.target.files); // console.log(event.target.files[0]); //file struc\n\n    var file = event.target.files[0];\n    var reader = new FileReader();\n\n    reader.onload = function (e) {\n      console.log(e.target.result);\n      var x = nbt.parse(e.target.result, function (error, data) {\n        if (error) {\n          throw error;\n        }\n\n        console.log(data);\n        parseNBT(data);\n      });\n    };\n\n    reader.readAsArrayBuffer(file);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [\"Input NBT file \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 20\n    }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = Upload;\nexport default Upload;\n\nvar _c;\n\n$RefreshReg$(_c, \"Upload\");","map":{"version":3,"sources":["C:/Users/jason/Documents/GitHub/build-viewer/frontend/src/components/Upload.js"],"names":["React","Container","NavbarToggle","nbt","Upload","findBlock","x","y","z","data","console","log","pos","value","BlockArray","parseNBT","input","dump","author","dimension","blocks","block","blockArray","x_i","push","y_i","z_i","handleChange","event","target","files","file","reader","FileReader","onload","e","result","parse","error","readAsArrayBuffer"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {Container} from \"react-bootstrap\";\r\nimport NavbarToggle from 'react-bootstrap/esm/NavbarToggle';\r\nimport nbt from '../nbt';\r\n\r\nconst Upload = () => {\r\n\r\n    // handleUpload = (event) => {\r\n    //     console.log('Success!');\r\n    // }\r\n\r\n    function findBlock(x,y,z,data){\r\n      console.log(data[0].pos.value.value);\r\n      const BlockArray = data[0].pos.value.value;\r\n      if(BlockArray[0] == x && BlockArray[1] == y && BlockArray[2] == z){\r\n        \r\n      }\r\n\r\n     // for(const block of data){\r\n        //data.state.value\r\n     // if()\r\n    }\r\n\r\n\r\n    function parseNBT(input) {\r\n      console.log('Parsing...');\r\n      let dump = {\r\n        author: \"\",\r\n        dimension: {x:0,y:0,z:0}, \r\n        blocks: [ //blocks[x][y][z]\r\n       //   [ [ [] /*z*/ ] /*y*/  ] /*x*/\r\n        ]\r\n      }\r\n\r\n    //  console.log(input['value']['blocks']['value']['value']) //Block Array\r\n\r\n      // const BlockList = input.value.blocks.value.value;\r\n      // BlockPositionArray = input.value.blocks.value.value.pos.value.value;\r\n\r\n\r\n      //First Pass\r\n      for(const block of input.value.blocks.value.value){ \r\n\r\n        //The [ x, y, z ] Array\r\n        var blockArray = block.pos.value.value;\r\n\r\n        if(blockArray[0] > dump.dimension.x){\r\n          dump.dimension.x = blockArray[0]; \r\n        }\r\n        //y\r\n        if(blockArray[1] > dump.dimension.y){\r\n          dump.dimension.y = blockArray[1]; \r\n        }\r\n        //z\r\n        if(blockArray[2] > dump.dimension.z){\r\n          dump.dimension.z = blockArray[2]; \r\n        }\r\n\r\n      }\r\n      dump.dimension.x++; dump.dimension.y++; dump.dimension.z++; //( +1 to each axis after loop )\r\n\r\n      console.log(dump.dimension)\r\n\r\n      console.log(findBlock(0,0,0,input.value.blocks.value.value));\r\n      //Generating 3d Array Structure: \r\n\r\n      for(let x_i = 0; x_i < dump.dimension.x; x_i++ ){\r\n\r\n        //Generate all x indexes\r\n        dump.blocks.push([]);\r\n        \r\n        //Generate all y indexes within x indexes\r\n        for(let y_i = 0; y_i < dump.dimension.y; y_i++){\r\n          dump.blocks[x_i].push([]);\r\n\r\n            //Generate z indexes within y indexes\r\n            for(let z_i = 0; z_i < dump.dimension.z; z_i++){\r\n              dump.blocks[x_i][y_i].push({ //Object\r\n                'name' : '0',\r\n                'isBlock' : true,\r\n                'direction': null\r\n              }\r\n              );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        \r\n\r\n      }\r\n\r\n      console.log(dump.blocks)\r\n\r\n      // for(const block of input.value.blocks.value.value){\r\n      //   console.log(block.pos.value.value);\r\n      //   console.log(block.state.value);\r\n      // }\r\n    }\r\n\r\n    \r\n    function handleChange(event) {\r\n        console.log(event.target.files);\r\n        // console.log(event.target.files[0]); //file struc\r\n        const file = event.target.files[0];\r\n        var reader = new FileReader();\r\n        reader.onload = (e) => {\r\n\r\n            console.log(e.target.result);\r\n\r\n\r\n            var x = nbt.parse(e.target.result, function(error, data) {\r\n              if (error) { throw error; }\r\n          \r\n              console.log(data);\r\n              parseNBT(data);\r\n          });\r\n\r\n        }\r\n        reader.readAsArrayBuffer(file);\r\n    }\r\n\r\n\r\n  return (\r\n    <Container>\r\n    Input NBT file <br/>\r\n    <input type=\"file\" onChange={handleChange}></input>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Upload"]},"metadata":{},"sourceType":"module"}