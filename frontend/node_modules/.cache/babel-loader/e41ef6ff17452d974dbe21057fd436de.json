{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport CodeNode from './CodeNode.js';\nimport FunctionCallNode from './FunctionCallNode.js';\n\nvar FunctionNode = /*#__PURE__*/function (_CodeNode) {\n  _inherits(FunctionNode, _CodeNode);\n\n  var _super = _createSuper(FunctionNode);\n\n  function FunctionNode() {\n    var _this;\n\n    var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n    _classCallCheck(this, FunctionNode);\n\n    _this = _super.call(this, code);\n    _this.keywords = {};\n    return _this;\n  }\n\n  _createClass(FunctionNode, [{\n    key: \"getNodeType\",\n    value: function getNodeType(builder) {\n      return this.getNodeFunction(builder).type;\n    }\n  }, {\n    key: \"getInputs\",\n    value: function getInputs(builder) {\n      return this.getNodeFunction(builder).inputs;\n    }\n  }, {\n    key: \"getNodeFunction\",\n    value: function getNodeFunction(builder) {\n      var nodeData = builder.getDataFromNode(this);\n      var nodeFunction = nodeData.nodeFunction;\n\n      if (nodeFunction === undefined) {\n        nodeFunction = builder.parser.parseFunction(this.code);\n        nodeData.nodeFunction = nodeFunction;\n      }\n\n      return nodeFunction;\n    }\n  }, {\n    key: \"call\",\n    value: function call() {\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new FunctionCallNode(this, parameters);\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder, output) {\n      _get(_getPrototypeOf(FunctionNode.prototype), \"generate\", this).call(this, builder);\n\n      var nodeFunction = this.getNodeFunction(builder);\n      var name = nodeFunction.name;\n      var type = nodeFunction.type;\n      var nodeCode = builder.getCodeFromNode(this, type);\n\n      if (name !== '') {\n        // use a custom property name\n        nodeCode.name = name;\n      }\n\n      var propertyName = builder.getPropertyName(nodeCode);\n      var code = this.getNodeFunction(builder).getCode(propertyName);\n      var keywords = this.keywords;\n      var keywordsProperties = Object.keys(keywords);\n\n      if (keywordsProperties.length > 0) {\n        var _iterator = _createForOfIteratorHelper(keywordsProperties),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var property = _step.value;\n            var propertyRegExp = new RegExp(\"\\\\b\".concat(property, \"\\\\b\"), 'g');\n            var nodeProperty = keywords[property].build(builder, 'property');\n            code = code.replace(propertyRegExp, nodeProperty);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      nodeCode.code = code;\n\n      if (output === 'property') {\n        return propertyName;\n      } else {\n        return builder.format(\"\".concat(propertyName, \"()\"), type, output);\n      }\n    }\n  }]);\n\n  return FunctionNode;\n}(CodeNode);\n\nexport default FunctionNode;","map":{"version":3,"sources":["C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/three-stdlib/nodes/core/FunctionNode.js"],"names":["CodeNode","FunctionCallNode","FunctionNode","code","keywords","builder","getNodeFunction","type","inputs","nodeData","getDataFromNode","nodeFunction","undefined","parser","parseFunction","parameters","output","name","nodeCode","getCodeFromNode","propertyName","getPropertyName","getCode","keywordsProperties","Object","keys","length","property","propertyRegExp","RegExp","nodeProperty","build","replace","format"],"mappings":";;;;;;;AAAA,OAAOA,QAAP,MAAqB,eAArB;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;;IAEMC,Y;;;;;AACJ,0BAAuB;AAAA;;AAAA,QAAXC,IAAW,uEAAJ,EAAI;;AAAA;;AACrB,8BAAMA,IAAN;AACA,UAAKC,QAAL,GAAgB,EAAhB;AAFqB;AAGtB;;;;WAED,qBAAYC,OAAZ,EAAqB;AACnB,aAAO,KAAKC,eAAL,CAAqBD,OAArB,EAA8BE,IAArC;AACD;;;WAED,mBAAUF,OAAV,EAAmB;AACjB,aAAO,KAAKC,eAAL,CAAqBD,OAArB,EAA8BG,MAArC;AACD;;;WAED,yBAAgBH,OAAhB,EAAyB;AACvB,UAAMI,QAAQ,GAAGJ,OAAO,CAACK,eAAR,CAAwB,IAAxB,CAAjB;AACA,UAAIC,YAAY,GAAGF,QAAQ,CAACE,YAA5B;;AAEA,UAAIA,YAAY,KAAKC,SAArB,EAAgC;AAC9BD,QAAAA,YAAY,GAAGN,OAAO,CAACQ,MAAR,CAAeC,aAAf,CAA6B,KAAKX,IAAlC,CAAf;AACAM,QAAAA,QAAQ,CAACE,YAAT,GAAwBA,YAAxB;AACD;;AAED,aAAOA,YAAP;AACD;;;WAED,gBAAsB;AAAA,UAAjBI,UAAiB,uEAAJ,EAAI;AACpB,aAAO,IAAId,gBAAJ,CAAqB,IAArB,EAA2Bc,UAA3B,CAAP;AACD;;;WAED,kBAASV,OAAT,EAAkBW,MAAlB,EAA0B;AACxB,iFAAeX,OAAf;;AACA,UAAMM,YAAY,GAAG,KAAKL,eAAL,CAAqBD,OAArB,CAArB;AACA,UAAMY,IAAI,GAAGN,YAAY,CAACM,IAA1B;AACA,UAAMV,IAAI,GAAGI,YAAY,CAACJ,IAA1B;AACA,UAAMW,QAAQ,GAAGb,OAAO,CAACc,eAAR,CAAwB,IAAxB,EAA8BZ,IAA9B,CAAjB;;AAEA,UAAIU,IAAI,KAAK,EAAb,EAAiB;AACf;AACAC,QAAAA,QAAQ,CAACD,IAAT,GAAgBA,IAAhB;AACD;;AAED,UAAMG,YAAY,GAAGf,OAAO,CAACgB,eAAR,CAAwBH,QAAxB,CAArB;AACA,UAAIf,IAAI,GAAG,KAAKG,eAAL,CAAqBD,OAArB,EAA8BiB,OAA9B,CAAsCF,YAAtC,CAAX;AACA,UAAMhB,QAAQ,GAAG,KAAKA,QAAtB;AACA,UAAMmB,kBAAkB,GAAGC,MAAM,CAACC,IAAP,CAAYrB,QAAZ,CAA3B;;AAEA,UAAImB,kBAAkB,CAACG,MAAnB,GAA4B,CAAhC,EAAmC;AAAA,mDACVH,kBADU;AAAA;;AAAA;AACjC,8DAA2C;AAAA,gBAAhCI,QAAgC;AACzC,gBAAMC,cAAc,GAAG,IAAIC,MAAJ,cAAiBF,QAAjB,UAAgC,GAAhC,CAAvB;AACA,gBAAMG,YAAY,GAAG1B,QAAQ,CAACuB,QAAD,CAAR,CAAmBI,KAAnB,CAAyB1B,OAAzB,EAAkC,UAAlC,CAArB;AACAF,YAAAA,IAAI,GAAGA,IAAI,CAAC6B,OAAL,CAAaJ,cAAb,EAA6BE,YAA7B,CAAP;AACD;AALgC;AAAA;AAAA;AAAA;AAAA;AAMlC;;AAEDZ,MAAAA,QAAQ,CAACf,IAAT,GAAgBA,IAAhB;;AAEA,UAAIa,MAAM,KAAK,UAAf,EAA2B;AACzB,eAAOI,YAAP;AACD,OAFD,MAEO;AACL,eAAOf,OAAO,CAAC4B,MAAR,WAAkBb,YAAlB,SAAoCb,IAApC,EAA0CS,MAA1C,CAAP;AACD;AACF;;;;EA9DwBhB,Q;;AAkE3B,eAAeE,YAAf","sourcesContent":["import CodeNode from './CodeNode.js';\nimport FunctionCallNode from './FunctionCallNode.js';\n\nclass FunctionNode extends CodeNode {\n  constructor(code = '') {\n    super(code);\n    this.keywords = {};\n  }\n\n  getNodeType(builder) {\n    return this.getNodeFunction(builder).type;\n  }\n\n  getInputs(builder) {\n    return this.getNodeFunction(builder).inputs;\n  }\n\n  getNodeFunction(builder) {\n    const nodeData = builder.getDataFromNode(this);\n    let nodeFunction = nodeData.nodeFunction;\n\n    if (nodeFunction === undefined) {\n      nodeFunction = builder.parser.parseFunction(this.code);\n      nodeData.nodeFunction = nodeFunction;\n    }\n\n    return nodeFunction;\n  }\n\n  call(parameters = {}) {\n    return new FunctionCallNode(this, parameters);\n  }\n\n  generate(builder, output) {\n    super.generate(builder);\n    const nodeFunction = this.getNodeFunction(builder);\n    const name = nodeFunction.name;\n    const type = nodeFunction.type;\n    const nodeCode = builder.getCodeFromNode(this, type);\n\n    if (name !== '') {\n      // use a custom property name\n      nodeCode.name = name;\n    }\n\n    const propertyName = builder.getPropertyName(nodeCode);\n    let code = this.getNodeFunction(builder).getCode(propertyName);\n    const keywords = this.keywords;\n    const keywordsProperties = Object.keys(keywords);\n\n    if (keywordsProperties.length > 0) {\n      for (const property of keywordsProperties) {\n        const propertyRegExp = new RegExp(`\\\\b${property}\\\\b`, 'g');\n        const nodeProperty = keywords[property].build(builder, 'property');\n        code = code.replace(propertyRegExp, nodeProperty);\n      }\n    }\n\n    nodeCode.code = code;\n\n    if (output === 'property') {\n      return propertyName;\n    } else {\n      return builder.format(`${propertyName}()`, type, output);\n    }\n  }\n\n}\n\nexport default FunctionNode;\n"]},"metadata":{},"sourceType":"module"}