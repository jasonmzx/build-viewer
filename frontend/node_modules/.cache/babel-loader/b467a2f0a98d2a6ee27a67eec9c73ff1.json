{"ast":null,"code":"import _classCallCheck from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport UniformNode from '../core/UniformNode.js';\nimport UVNode from './UVNode.js';\n\nvar TextureNode = /*#__PURE__*/function (_UniformNode) {\n  _inherits(TextureNode, _UniformNode);\n\n  var _super = _createSuper(TextureNode);\n\n  function TextureNode(value) {\n    var _this;\n\n    var uvNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new UVNode();\n    var biasNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    _classCallCheck(this, TextureNode);\n\n    _this = _super.call(this, value, 'vec4');\n    _this.uvNode = uvNode;\n    _this.biasNode = biasNode;\n    return _this;\n  }\n\n  _createClass(TextureNode, [{\n    key: \"getUniformHash\",\n    value: function getUniformHash() {\n      return this.value.uuid;\n    }\n  }, {\n    key: \"getInputType\",\n    value: function getInputType() {\n      return 'texture';\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder, output) {\n      var texture = this.value;\n\n      if (!texture || texture.isTexture !== true) {\n        throw new Error('TextureNode: Need a three.js texture.');\n      }\n\n      var textureProperty = _get(_getPrototypeOf(TextureNode.prototype), \"generate\", this).call(this, builder, 'texture');\n\n      if (output === 'sampler') {\n        return textureProperty + '_sampler';\n      } else if (builder.isReference(output)) {\n        return textureProperty;\n      } else {\n        var nodeData = builder.getDataFromNode(this);\n        var snippet = nodeData.snippet;\n\n        if (snippet === undefined) {\n          var uvSnippet = this.uvNode.build(builder, 'vec2');\n          var biasNode = this.biasNode;\n\n          if (biasNode !== null) {\n            var biasSnippet = biasNode.build(builder, 'float');\n            snippet = builder.getTextureBias(textureProperty, uvSnippet, biasSnippet);\n          } else {\n            snippet = builder.getTexture(textureProperty, uvSnippet);\n          }\n\n          nodeData.snippet = snippet;\n        }\n\n        return builder.format(snippet, 'vec4', output);\n      }\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(data) {\n      _get(_getPrototypeOf(TextureNode.prototype), \"serialize\", this).call(this, data);\n\n      data.value = this.value.toJSON(data.meta).uuid;\n    }\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(data) {\n      _get(_getPrototypeOf(TextureNode.prototype), \"deserialize\", this).call(this, data);\n\n      this.value = data.meta.textures[data.value];\n    }\n  }]);\n\n  return TextureNode;\n}(UniformNode);\n\nTextureNode.prototype.isTextureNode = true;\nexport default TextureNode;","map":{"version":3,"sources":["C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/three-stdlib/nodes/accessors/TextureNode.js"],"names":["UniformNode","UVNode","TextureNode","value","uvNode","biasNode","uuid","builder","output","texture","isTexture","Error","textureProperty","isReference","nodeData","getDataFromNode","snippet","undefined","uvSnippet","build","biasSnippet","getTextureBias","getTexture","format","data","toJSON","meta","textures","prototype","isTextureNode"],"mappings":";;;;;;AAAA,OAAOA,WAAP,MAAwB,wBAAxB;AACA,OAAOC,MAAP,MAAmB,aAAnB;;IAEMC,W;;;;;AACJ,uBAAYC,KAAZ,EAA2D;AAAA;;AAAA,QAAxCC,MAAwC,uEAA/B,IAAIH,MAAJ,EAA+B;AAAA,QAAjBI,QAAiB,uEAAN,IAAM;;AAAA;;AACzD,8BAAMF,KAAN,EAAa,MAAb;AACA,UAAKC,MAAL,GAAcA,MAAd;AACA,UAAKC,QAAL,GAAgBA,QAAhB;AAHyD;AAI1D;;;;WAED,0BAAiB;AACf,aAAO,KAAKF,KAAL,CAAWG,IAAlB;AACD;;;WAED,wBAAe;AACb,aAAO,SAAP;AACD;;;WAED,kBAASC,OAAT,EAAkBC,MAAlB,EAA0B;AACxB,UAAMC,OAAO,GAAG,KAAKN,KAArB;;AAEA,UAAI,CAACM,OAAD,IAAYA,OAAO,CAACC,SAAR,KAAsB,IAAtC,EAA4C;AAC1C,cAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAED,UAAMC,eAAe,6EAAkBL,OAAlB,EAA2B,SAA3B,CAArB;;AAEA,UAAIC,MAAM,KAAK,SAAf,EAA0B;AACxB,eAAOI,eAAe,GAAG,UAAzB;AACD,OAFD,MAEO,IAAIL,OAAO,CAACM,WAAR,CAAoBL,MAApB,CAAJ,EAAiC;AACtC,eAAOI,eAAP;AACD,OAFM,MAEA;AACL,YAAME,QAAQ,GAAGP,OAAO,CAACQ,eAAR,CAAwB,IAAxB,CAAjB;AACA,YAAIC,OAAO,GAAGF,QAAQ,CAACE,OAAvB;;AAEA,YAAIA,OAAO,KAAKC,SAAhB,EAA2B;AACzB,cAAMC,SAAS,GAAG,KAAKd,MAAL,CAAYe,KAAZ,CAAkBZ,OAAlB,EAA2B,MAA3B,CAAlB;AACA,cAAMF,QAAQ,GAAG,KAAKA,QAAtB;;AAEA,cAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACrB,gBAAMe,WAAW,GAAGf,QAAQ,CAACc,KAAT,CAAeZ,OAAf,EAAwB,OAAxB,CAApB;AACAS,YAAAA,OAAO,GAAGT,OAAO,CAACc,cAAR,CAAuBT,eAAvB,EAAwCM,SAAxC,EAAmDE,WAAnD,CAAV;AACD,WAHD,MAGO;AACLJ,YAAAA,OAAO,GAAGT,OAAO,CAACe,UAAR,CAAmBV,eAAnB,EAAoCM,SAApC,CAAV;AACD;;AAEDJ,UAAAA,QAAQ,CAACE,OAAT,GAAmBA,OAAnB;AACD;;AAED,eAAOT,OAAO,CAACgB,MAAR,CAAeP,OAAf,EAAwB,MAAxB,EAAgCR,MAAhC,CAAP;AACD;AACF;;;WAED,mBAAUgB,IAAV,EAAgB;AACd,iFAAgBA,IAAhB;;AACAA,MAAAA,IAAI,CAACrB,KAAL,GAAa,KAAKA,KAAL,CAAWsB,MAAX,CAAkBD,IAAI,CAACE,IAAvB,EAA6BpB,IAA1C;AACD;;;WAED,qBAAYkB,IAAZ,EAAkB;AAChB,mFAAkBA,IAAlB;;AACA,WAAKrB,KAAL,GAAaqB,IAAI,CAACE,IAAL,CAAUC,QAAV,CAAmBH,IAAI,CAACrB,KAAxB,CAAb;AACD;;;;EA1DuBH,W;;AA8D1BE,WAAW,CAAC0B,SAAZ,CAAsBC,aAAtB,GAAsC,IAAtC;AAEA,eAAe3B,WAAf","sourcesContent":["import UniformNode from '../core/UniformNode.js';\nimport UVNode from './UVNode.js';\n\nclass TextureNode extends UniformNode {\n  constructor(value, uvNode = new UVNode(), biasNode = null) {\n    super(value, 'vec4');\n    this.uvNode = uvNode;\n    this.biasNode = biasNode;\n  }\n\n  getUniformHash() {\n    return this.value.uuid;\n  }\n\n  getInputType() {\n    return 'texture';\n  }\n\n  generate(builder, output) {\n    const texture = this.value;\n\n    if (!texture || texture.isTexture !== true) {\n      throw new Error('TextureNode: Need a three.js texture.');\n    }\n\n    const textureProperty = super.generate(builder, 'texture');\n\n    if (output === 'sampler') {\n      return textureProperty + '_sampler';\n    } else if (builder.isReference(output)) {\n      return textureProperty;\n    } else {\n      const nodeData = builder.getDataFromNode(this);\n      let snippet = nodeData.snippet;\n\n      if (snippet === undefined) {\n        const uvSnippet = this.uvNode.build(builder, 'vec2');\n        const biasNode = this.biasNode;\n\n        if (biasNode !== null) {\n          const biasSnippet = biasNode.build(builder, 'float');\n          snippet = builder.getTextureBias(textureProperty, uvSnippet, biasSnippet);\n        } else {\n          snippet = builder.getTexture(textureProperty, uvSnippet);\n        }\n\n        nodeData.snippet = snippet;\n      }\n\n      return builder.format(snippet, 'vec4', output);\n    }\n  }\n\n  serialize(data) {\n    super.serialize(data);\n    data.value = this.value.toJSON(data.meta).uuid;\n  }\n\n  deserialize(data) {\n    super.deserialize(data);\n    this.value = data.meta.textures[data.value];\n  }\n\n}\n\nTextureNode.prototype.isTextureNode = true;\n\nexport default TextureNode;\n"]},"metadata":{},"sourceType":"module"}