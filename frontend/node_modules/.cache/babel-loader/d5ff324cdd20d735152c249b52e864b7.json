{"ast":null,"code":"import _objectSpread from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"scale\", \"frames\", \"opacity\", \"width\", \"height\", \"blur\", \"far\", \"resolution\", \"smooth\", \"color\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\nvar ContactShadows = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var scale = _ref.scale,\n      _ref$frames = _ref.frames,\n      frames = _ref$frames === void 0 ? Infinity : _ref$frames,\n      _ref$opacity = _ref.opacity,\n      opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? 1 : _ref$width,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? 1 : _ref$height,\n      _ref$blur = _ref.blur,\n      blur = _ref$blur === void 0 ? 1 : _ref$blur,\n      _ref$far = _ref.far,\n      far = _ref$far === void 0 ? 10 : _ref$far,\n      _ref$resolution = _ref.resolution,\n      resolution = _ref$resolution === void 0 ? 256 : _ref$resolution,\n      _ref$smooth = _ref.smooth,\n      smooth = _ref$smooth === void 0 ? true : _ref$smooth,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? '#000000' : _ref$color,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var scene = useThree(function (_ref2) {\n    var scene = _ref2.scene;\n    return scene;\n  });\n  var gl = useThree(function (_ref3) {\n    var gl = _ref3.gl;\n    return gl;\n  });\n  var shadowCamera = React.useRef(null);\n  width = width * (Array.isArray(scale) ? scale[0] : scale || 1);\n  height = height * (Array.isArray(scale) ? scale[1] : scale || 1);\n\n  var _React$useMemo = React.useMemo(function () {\n    var renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    var renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    var planeGeometry = new THREE.PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    var blurPlane = new THREE.Mesh(planeGeometry);\n    var depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = function (shader) {\n      shader.uniforms = _objectSpread(_objectSpread({}, shader.uniforms), {}, {\n        ucolor: {\n          value: new THREE.Color(color).convertSRGBToLinear()\n        }\n      });\n      shader.fragmentShader = shader.fragmentShader.replace(\"void main() {\", //\n      \"uniform vec3 ucolor;\\n           void main() {\\n          \");\n      shader.fragmentShader = shader.fragmentShader.replace('vec4( vec3( 1.0 - fragCoordZ ), opacity );', 'vec4( ucolor, ( 1.0 - fragCoordZ ) * 1.0 );');\n    };\n\n    var horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    var verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height, scale]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 7),\n      renderTarget = _React$useMemo2[0],\n      planeGeometry = _React$useMemo2[1],\n      depthMaterial = _React$useMemo2[2],\n      blurPlane = _React$useMemo2[3],\n      horizontalBlurMaterial = _React$useMemo2[4],\n      verticalBlurMaterial = _React$useMemo2[5],\n      renderTargetBlur = _React$useMemo2[6];\n\n  var blurShadows = React.useCallback(function (blur) {\n    blurPlane.visible = true;\n    blurPlane.material = horizontalBlurMaterial;\n    horizontalBlurMaterial.uniforms.tDiffuse.value = renderTarget.texture;\n    horizontalBlurMaterial.uniforms.h.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTargetBlur);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.material = verticalBlurMaterial;\n    verticalBlurMaterial.uniforms.tDiffuse.value = renderTargetBlur.texture;\n    verticalBlurMaterial.uniforms.v.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTarget);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.visible = false;\n  }, []);\n  var count = 0;\n  useFrame(function () {\n    if (shadowCamera.current && (frames === Infinity || count < frames)) {\n      var initialBackground = scene.background;\n      scene.background = null;\n      var initialOverrideMaterial = scene.overrideMaterial;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = initialOverrideMaterial;\n      blurShadows(blur);\n      if (smooth) blurShadows(blur * 0.4);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    \"rotation-x\": Math.PI / 2\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    transparent: true,\n    opacity: opacity\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\nexport { ContactShadows };","map":{"version":3,"sources":["C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/@react-three/drei/core/ContactShadows.js"],"names":["_extends","React","THREE","useThree","useFrame","HorizontalBlurShader","VerticalBlurShader","ContactShadows","forwardRef","ref","scale","frames","Infinity","opacity","width","height","blur","far","resolution","smooth","color","props","scene","gl","shadowCamera","useRef","Array","isArray","useMemo","renderTarget","WebGLRenderTarget","renderTargetBlur","texture","generateMipmaps","planeGeometry","PlaneBufferGeometry","rotateX","Math","PI","blurPlane","Mesh","depthMaterial","MeshDepthMaterial","depthTest","depthWrite","onBeforeCompile","shader","uniforms","ucolor","value","Color","convertSRGBToLinear","fragmentShader","replace","horizontalBlurMaterial","ShaderMaterial","verticalBlurMaterial","blurShadows","useCallback","visible","material","tDiffuse","h","setRenderTarget","render","current","v","count","initialBackground","background","initialOverrideMaterial","overrideMaterial","createElement","geometry","rotation","map","transparent","args"],"mappings":"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","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\n\nconst ContactShadows = /*#__PURE__*/React.forwardRef(({\n  scale,\n  frames = Infinity,\n  opacity = 1,\n  width = 1,\n  height = 1,\n  blur = 1,\n  far = 10,\n  resolution = 256,\n  smooth = true,\n  color = '#000000',\n  ...props\n}, ref) => {\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const shadowCamera = React.useRef(null);\n  width = width * (Array.isArray(scale) ? scale[0] : scale || 1);\n  height = height * (Array.isArray(scale) ? scale[1] : scale || 1);\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React.useMemo(() => {\n    const renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new THREE.PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new THREE.Mesh(planeGeometry);\n    const depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = shader => {\n      shader.uniforms = { ...shader.uniforms,\n        ucolor: {\n          value: new THREE.Color(color).convertSRGBToLinear()\n        }\n      };\n      shader.fragmentShader = shader.fragmentShader.replace(`void main() {`, //\n      `uniform vec3 ucolor;\n           void main() {\n          `);\n      shader.fragmentShader = shader.fragmentShader.replace('vec4( vec3( 1.0 - fragCoordZ ), opacity );', 'vec4( ucolor, ( 1.0 - fragCoordZ ) * 1.0 );');\n    };\n\n    const horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height, scale]);\n  const blurShadows = React.useCallback(blur => {\n    blurPlane.visible = true;\n    blurPlane.material = horizontalBlurMaterial;\n    horizontalBlurMaterial.uniforms.tDiffuse.value = renderTarget.texture;\n    horizontalBlurMaterial.uniforms.h.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTargetBlur);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.material = verticalBlurMaterial;\n    verticalBlurMaterial.uniforms.tDiffuse.value = renderTargetBlur.texture;\n    verticalBlurMaterial.uniforms.v.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTarget);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.visible = false;\n  }, []);\n  let count = 0;\n  useFrame(() => {\n    if (shadowCamera.current && (frames === Infinity || count < frames)) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      const initialOverrideMaterial = scene.overrideMaterial;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = initialOverrideMaterial;\n      blurShadows(blur);\n      if (smooth) blurShadows(blur * 0.4);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    \"rotation-x\": Math.PI / 2\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    transparent: true,\n    opacity: opacity\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\n\nexport { ContactShadows };\n"]},"metadata":{},"sourceType":"module"}