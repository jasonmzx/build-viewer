{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { NodeUpdateType } from './constants.js';\nimport { getNodesKeys } from './NodeUtils.js';\nimport { MathUtils } from 'three';\nvar _nodeId = 0;\n\nvar Node = /*#__PURE__*/function () {\n  function Node() {\n    var nodeType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    _classCallCheck(this, Node);\n\n    this.nodeType = nodeType;\n    this.updateType = NodeUpdateType.None;\n    this.uuid = MathUtils.generateUUID();\n    Object.defineProperty(this, 'id', {\n      value: _nodeId++\n    });\n  }\n\n  _createClass(Node, [{\n    key: \"type\",\n    get: function get() {\n      return this.constructor.name;\n    }\n  }, {\n    key: \"getHash\",\n    value: function getHash() {\n      return this.uuid;\n    }\n  }, {\n    key: \"getUpdateType\",\n    value: function getUpdateType() {\n      return this.updateType;\n    }\n  }, {\n    key: \"getNodeType\",\n    value: function getNodeType() {\n      return this.nodeType;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      console.warn('Abstract function.');\n    }\n  }, {\n    key: \"generate\",\n    value: function generate() {\n      console.warn('Abstract function.');\n    }\n  }, {\n    key: \"analyze\",\n    value: function analyze(builder) {\n      var hash = this.getHash(builder);\n      var sharedNode = builder.getNodeFromHash(hash);\n\n      if (sharedNode !== undefined && this !== sharedNode) {\n        return sharedNode.analyze(builder);\n      }\n\n      var nodeData = builder.getDataFromNode(this);\n      nodeData.dependenciesCount = nodeData.dependenciesCount === undefined ? 1 : nodeData.dependenciesCount + 1;\n      var nodeKeys = getNodesKeys(this);\n\n      var _iterator = _createForOfIteratorHelper(nodeKeys),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var property = _step.value;\n          this[property].analyze(builder);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"build\",\n    value: function build(builder) {\n      var output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var hash = this.getHash(builder);\n      var sharedNode = builder.getNodeFromHash(hash);\n\n      if (sharedNode !== undefined && this !== sharedNode) {\n        return sharedNode.build(builder, output);\n      }\n\n      builder.addNode(this);\n      builder.addStack(this);\n      var nodeData = builder.getDataFromNode(this);\n      var isGenerateOnce = this.generate.length === 1;\n      var snippet = null;\n\n      if (isGenerateOnce) {\n        var type = this.getNodeType(builder);\n        snippet = nodeData.snippet;\n\n        if (snippet === undefined) {\n          snippet = this.generate(builder) || '';\n          nodeData.snippet = snippet;\n        }\n\n        snippet = builder.format(snippet, type, output);\n      } else {\n        snippet = this.generate(builder, output) || '';\n      }\n\n      builder.removeStack(this);\n      return snippet;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(json) {\n      var nodeKeys = getNodesKeys(this);\n\n      if (nodeKeys.length > 0) {\n        var inputNodes = {};\n\n        var _iterator2 = _createForOfIteratorHelper(nodeKeys),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var property = _step2.value;\n            inputNodes[property] = this[property].toJSON(json.meta).uuid;\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        json.inputNodes = inputNodes;\n      }\n    }\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(json) {\n      if (json.inputNodes !== undefined) {\n        var nodes = json.meta.nodes;\n\n        for (var property in json.inputNodes) {\n          var uuid = json.inputNodes[property];\n          this[property] = nodes[uuid];\n        }\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(meta) {\n      var uuid = this.uuid,\n          type = this.type;\n      var isRoot = meta === undefined || typeof meta === 'string';\n\n      if (isRoot) {\n        meta = {\n          textures: {},\n          images: {},\n          nodes: {}\n        };\n      } // serialize\n\n\n      var data = meta.nodes[uuid];\n\n      if (data === undefined) {\n        data = {\n          uuid: uuid,\n          type: type,\n          meta: meta,\n          metadata: {\n            version: 4.5,\n            type: 'Node',\n            generator: 'Node.toJSON'\n          }\n        };\n        meta.nodes[data.uuid] = data;\n        this.serialize(data);\n        delete data.meta;\n      } // TODO: Copied from Object3D.toJSON\n\n\n      function extractFromCache(cache) {\n        var values = [];\n\n        for (var key in cache) {\n          var _data = cache[key];\n          delete _data.metadata;\n          values.push(_data);\n        }\n\n        return values;\n      }\n\n      if (isRoot) {\n        var textures = extractFromCache(meta.textures);\n        var images = extractFromCache(meta.images);\n        var nodes = extractFromCache(meta.nodes);\n        if (textures.length > 0) data.textures = textures;\n        if (images.length > 0) data.images = images;\n        if (nodes.length > 0) data.nodes = nodes;\n      }\n\n      return data;\n    }\n  }]);\n\n  return Node;\n}();\n\nNode.prototype.isNode = true;\nexport default Node;","map":{"version":3,"sources":["C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/three-stdlib/nodes/core/Node.js"],"names":["NodeUpdateType","getNodesKeys","MathUtils","_nodeId","Node","nodeType","updateType","None","uuid","generateUUID","Object","defineProperty","value","constructor","name","console","warn","builder","hash","getHash","sharedNode","getNodeFromHash","undefined","analyze","nodeData","getDataFromNode","dependenciesCount","nodeKeys","property","output","build","addNode","addStack","isGenerateOnce","generate","length","snippet","type","getNodeType","format","removeStack","json","inputNodes","toJSON","meta","nodes","isRoot","textures","images","data","metadata","version","generator","serialize","extractFromCache","cache","values","key","push","prototype","isNode"],"mappings":"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","sourcesContent":["import { NodeUpdateType } from './constants.js';\nimport { getNodesKeys } from './NodeUtils.js';\nimport { MathUtils } from 'three';\n\nlet _nodeId = 0;\n\nclass Node {\n  constructor(nodeType = null) {\n    this.nodeType = nodeType;\n    this.updateType = NodeUpdateType.None;\n    this.uuid = MathUtils.generateUUID();\n    Object.defineProperty(this, 'id', {\n      value: _nodeId++\n    });\n  }\n\n  get type() {\n    return this.constructor.name;\n  }\n\n  getHash() {\n    return this.uuid;\n  }\n\n  getUpdateType() {\n    return this.updateType;\n  }\n\n  getNodeType() {\n    return this.nodeType;\n  }\n\n  update() {\n    console.warn('Abstract function.');\n  }\n\n  generate() {\n    console.warn('Abstract function.');\n  }\n\n  analyze(builder) {\n    const hash = this.getHash(builder);\n    const sharedNode = builder.getNodeFromHash(hash);\n\n    if (sharedNode !== undefined && this !== sharedNode) {\n      return sharedNode.analyze(builder);\n    }\n\n    const nodeData = builder.getDataFromNode(this);\n    nodeData.dependenciesCount = nodeData.dependenciesCount === undefined ? 1 : nodeData.dependenciesCount + 1;\n    const nodeKeys = getNodesKeys(this);\n\n    for (const property of nodeKeys) {\n      this[property].analyze(builder);\n    }\n  }\n\n  build(builder, output = null) {\n    const hash = this.getHash(builder);\n    const sharedNode = builder.getNodeFromHash(hash);\n\n    if (sharedNode !== undefined && this !== sharedNode) {\n      return sharedNode.build(builder, output);\n    }\n\n    builder.addNode(this);\n    builder.addStack(this);\n    const nodeData = builder.getDataFromNode(this);\n    const isGenerateOnce = this.generate.length === 1;\n    let snippet = null;\n\n    if (isGenerateOnce) {\n      const type = this.getNodeType(builder);\n      snippet = nodeData.snippet;\n\n      if (snippet === undefined) {\n        snippet = this.generate(builder) || '';\n        nodeData.snippet = snippet;\n      }\n\n      snippet = builder.format(snippet, type, output);\n    } else {\n      snippet = this.generate(builder, output) || '';\n    }\n\n    builder.removeStack(this);\n    return snippet;\n  }\n\n  serialize(json) {\n    const nodeKeys = getNodesKeys(this);\n\n    if (nodeKeys.length > 0) {\n      const inputNodes = {};\n\n      for (const property of nodeKeys) {\n        inputNodes[property] = this[property].toJSON(json.meta).uuid;\n      }\n\n      json.inputNodes = inputNodes;\n    }\n  }\n\n  deserialize(json) {\n    if (json.inputNodes !== undefined) {\n      const nodes = json.meta.nodes;\n\n      for (const property in json.inputNodes) {\n        const uuid = json.inputNodes[property];\n        this[property] = nodes[uuid];\n      }\n    }\n  }\n\n  toJSON(meta) {\n    const {\n      uuid,\n      type\n    } = this;\n    const isRoot = meta === undefined || typeof meta === 'string';\n\n    if (isRoot) {\n      meta = {\n        textures: {},\n        images: {},\n        nodes: {}\n      };\n    } // serialize\n\n\n    let data = meta.nodes[uuid];\n\n    if (data === undefined) {\n      data = {\n        uuid,\n        type,\n        meta,\n        metadata: {\n          version: 4.5,\n          type: 'Node',\n          generator: 'Node.toJSON'\n        }\n      };\n      meta.nodes[data.uuid] = data;\n      this.serialize(data);\n      delete data.meta;\n    } // TODO: Copied from Object3D.toJSON\n\n\n    function extractFromCache(cache) {\n      const values = [];\n\n      for (const key in cache) {\n        const data = cache[key];\n        delete data.metadata;\n        values.push(data);\n      }\n\n      return values;\n    }\n\n    if (isRoot) {\n      const textures = extractFromCache(meta.textures);\n      const images = extractFromCache(meta.images);\n      const nodes = extractFromCache(meta.nodes);\n      if (textures.length > 0) data.textures = textures;\n      if (images.length > 0) data.images = images;\n      if (nodes.length > 0) data.nodes = nodes;\n    }\n\n    return data;\n  }\n\n}\n\nNode.prototype.isNode = true;\n\nexport default Node;\n"]},"metadata":{},"sourceType":"module"}