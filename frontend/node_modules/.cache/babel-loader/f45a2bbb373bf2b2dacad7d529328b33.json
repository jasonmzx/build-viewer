{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar NodeKeywords = /*#__PURE__*/function () {\n  function NodeKeywords() {\n    _classCallCheck(this, NodeKeywords);\n\n    this.keywords = [];\n    this.nodes = [];\n    this.keywordsCallback = {};\n  }\n\n  _createClass(NodeKeywords, [{\n    key: \"getNode\",\n    value: function getNode(name) {\n      var node = this.nodes[name];\n\n      if (node === undefined && this.keywordsCallback[name] !== undefined) {\n        node = this.keywordsCallback[name](name);\n        this.nodes[name] = node;\n      }\n\n      return node;\n    }\n  }, {\n    key: \"addKeyword\",\n    value: function addKeyword(name, callback) {\n      this.keywords.push(name);\n      this.keywordsCallback[name] = callback;\n      return this;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(code) {\n      var keywordNames = this.keywords;\n      var regExp = new RegExp(\"\\\\b\".concat(keywordNames.join('\\\\b|\\\\b'), \"\\\\b\"), 'g');\n      var codeKeywords = code.match(regExp);\n      var keywordNodes = [];\n\n      if (codeKeywords !== null) {\n        var _iterator = _createForOfIteratorHelper(codeKeywords),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var keyword = _step.value;\n            var node = this.getNode(keyword);\n\n            if (node !== undefined && keywordNodes.indexOf(node) === -1) {\n              keywordNodes.push(node);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      return keywordNodes;\n    }\n  }, {\n    key: \"include\",\n    value: function include(builder, code) {\n      var keywordNodes = this.parse(code);\n\n      var _iterator2 = _createForOfIteratorHelper(keywordNodes),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var keywordNode = _step2.value;\n          keywordNode.build(builder);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }]);\n\n  return NodeKeywords;\n}();\n\nexport default NodeKeywords;","map":{"version":3,"sources":["C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/three-stdlib/nodes/core/NodeKeywords.js"],"names":["NodeKeywords","keywords","nodes","keywordsCallback","name","node","undefined","callback","push","code","keywordNames","regExp","RegExp","join","codeKeywords","match","keywordNodes","keyword","getNode","indexOf","builder","parse","keywordNode","build"],"mappings":";;;;IAAMA,Y;AACJ,0BAAc;AAAA;;AACZ,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,gBAAL,GAAwB,EAAxB;AACD;;;;WAED,iBAAQC,IAAR,EAAc;AACZ,UAAIC,IAAI,GAAG,KAAKH,KAAL,CAAWE,IAAX,CAAX;;AAEA,UAAIC,IAAI,KAAKC,SAAT,IAAsB,KAAKH,gBAAL,CAAsBC,IAAtB,MAAgCE,SAA1D,EAAqE;AACnED,QAAAA,IAAI,GAAG,KAAKF,gBAAL,CAAsBC,IAAtB,EAA4BA,IAA5B,CAAP;AACA,aAAKF,KAAL,CAAWE,IAAX,IAAmBC,IAAnB;AACD;;AAED,aAAOA,IAAP;AACD;;;WAED,oBAAWD,IAAX,EAAiBG,QAAjB,EAA2B;AACzB,WAAKN,QAAL,CAAcO,IAAd,CAAmBJ,IAAnB;AACA,WAAKD,gBAAL,CAAsBC,IAAtB,IAA8BG,QAA9B;AACA,aAAO,IAAP;AACD;;;WAED,eAAME,IAAN,EAAY;AACV,UAAMC,YAAY,GAAG,KAAKT,QAA1B;AACA,UAAMU,MAAM,GAAG,IAAIC,MAAJ,cAAiBF,YAAY,CAACG,IAAb,CAAkB,SAAlB,CAAjB,UAAoD,GAApD,CAAf;AACA,UAAMC,YAAY,GAAGL,IAAI,CAACM,KAAL,CAAWJ,MAAX,CAArB;AACA,UAAMK,YAAY,GAAG,EAArB;;AAEA,UAAIF,YAAY,KAAK,IAArB,EAA2B;AAAA,mDACHA,YADG;AAAA;;AAAA;AACzB,8DAAoC;AAAA,gBAAzBG,OAAyB;AAClC,gBAAMZ,IAAI,GAAG,KAAKa,OAAL,CAAaD,OAAb,CAAb;;AAEA,gBAAIZ,IAAI,KAAKC,SAAT,IAAsBU,YAAY,CAACG,OAAb,CAAqBd,IAArB,MAA+B,CAAC,CAA1D,EAA6D;AAC3DW,cAAAA,YAAY,CAACR,IAAb,CAAkBH,IAAlB;AACD;AACF;AAPwB;AAAA;AAAA;AAAA;AAAA;AAQ1B;;AAED,aAAOW,YAAP;AACD;;;WAED,iBAAQI,OAAR,EAAiBX,IAAjB,EAAuB;AACrB,UAAMO,YAAY,GAAG,KAAKK,KAAL,CAAWZ,IAAX,CAArB;;AADqB,kDAGKO,YAHL;AAAA;;AAAA;AAGrB,+DAAwC;AAAA,cAA7BM,WAA6B;AACtCA,UAAAA,WAAW,CAACC,KAAZ,CAAkBH,OAAlB;AACD;AALoB;AAAA;AAAA;AAAA;AAAA;AAMtB;;;;;;AAIH,eAAepB,YAAf","sourcesContent":["class NodeKeywords {\n  constructor() {\n    this.keywords = [];\n    this.nodes = [];\n    this.keywordsCallback = {};\n  }\n\n  getNode(name) {\n    let node = this.nodes[name];\n\n    if (node === undefined && this.keywordsCallback[name] !== undefined) {\n      node = this.keywordsCallback[name](name);\n      this.nodes[name] = node;\n    }\n\n    return node;\n  }\n\n  addKeyword(name, callback) {\n    this.keywords.push(name);\n    this.keywordsCallback[name] = callback;\n    return this;\n  }\n\n  parse(code) {\n    const keywordNames = this.keywords;\n    const regExp = new RegExp(`\\\\b${keywordNames.join('\\\\b|\\\\b')}\\\\b`, 'g');\n    const codeKeywords = code.match(regExp);\n    const keywordNodes = [];\n\n    if (codeKeywords !== null) {\n      for (const keyword of codeKeywords) {\n        const node = this.getNode(keyword);\n\n        if (node !== undefined && keywordNodes.indexOf(node) === -1) {\n          keywordNodes.push(node);\n        }\n      }\n    }\n\n    return keywordNodes;\n  }\n\n  include(builder, code) {\n    const keywordNodes = this.parse(code);\n\n    for (const keywordNode of keywordNodes) {\n      keywordNode.build(builder);\n    }\n  }\n\n}\n\nexport default NodeKeywords;\n"]},"metadata":{},"sourceType":"module"}