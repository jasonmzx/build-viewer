{"ast":null,"code":"import _classCallCheck from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport Node from '../core/Node.js';\nimport { ShaderNode, sub, mul, pow, vec3, lessThanEqual, mix, join } from '../ShaderNode.js';\nimport { LinearEncoding, sRGBEncoding } from 'three';\nvar LinearToLinear = new ShaderNode(function (inputs) {\n  return inputs.value;\n});\nvar LinearTosRGB = new ShaderNode(function (inputs) {\n  var value = inputs.value;\n  var rgb = value.rgb;\n  var a = sub(mul(pow(value.rgb, vec3(0.41666)), 1.055), vec3(0.055));\n  var b = mul(rgb, 12.92);\n  var factor = vec3(lessThanEqual(rgb, vec3(0.0031308)));\n  var rgbResult = mix(a, b, factor);\n  return join(rgbResult.r, rgbResult.g, rgbResult.b, value.a);\n});\nvar EncodingLib = {\n  LinearToLinear: LinearToLinear,\n  LinearTosRGB: LinearTosRGB\n};\n\nvar ColorSpaceNode = /*#__PURE__*/function (_Node) {\n  _inherits(ColorSpaceNode, _Node);\n\n  var _super = _createSuper(ColorSpaceNode);\n\n  function ColorSpaceNode(method, node) {\n    var _this;\n\n    _classCallCheck(this, ColorSpaceNode);\n\n    _this = _super.call(this, 'vec4');\n    _this.method = method;\n    _this.node = node;\n    return _this;\n  }\n\n  _createClass(ColorSpaceNode, [{\n    key: \"fromEncoding\",\n    value: function fromEncoding(encoding) {\n      var method = null;\n\n      if (encoding === LinearEncoding) {\n        method = 'Linear';\n      } else if (encoding === sRGBEncoding) {\n        method = 'sRGB';\n      }\n\n      this.method = 'LinearTo' + method;\n      return this;\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder) {\n      var type = this.getNodeType(builder);\n      var method = this.method;\n      var node = this.node;\n\n      if (method !== ColorSpaceNode.LINEAR_TO_LINEAR) {\n        var encodingFunctionNode = EncodingLib[method];\n        return encodingFunctionNode({\n          value: node\n        }).build(builder, type);\n      } else {\n        return node.build(builder, type);\n      }\n    }\n  }]);\n\n  return ColorSpaceNode;\n}(Node);\n\n_defineProperty(ColorSpaceNode, \"LINEAR_TO_LINEAR\", 'LinearToLinear');\n\n_defineProperty(ColorSpaceNode, \"LINEAR_TO_SRGB\", 'LinearTosRGB');\n\nexport default ColorSpaceNode;\nexport { LinearToLinear, LinearTosRGB };","map":{"version":3,"sources":["C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/three-stdlib/nodes/display/ColorSpaceNode.js"],"names":["_defineProperty","Node","ShaderNode","sub","mul","pow","vec3","lessThanEqual","mix","join","LinearEncoding","sRGBEncoding","LinearToLinear","inputs","value","LinearTosRGB","rgb","a","b","factor","rgbResult","r","g","EncodingLib","ColorSpaceNode","method","node","encoding","builder","type","getNodeType","LINEAR_TO_LINEAR","encodingFunctionNode","build"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport Node from '../core/Node.js';\nimport { ShaderNode, sub, mul, pow, vec3, lessThanEqual, mix, join } from '../ShaderNode.js';\nimport { LinearEncoding, sRGBEncoding } from 'three';\n\nconst LinearToLinear = new ShaderNode(inputs => {\n  return inputs.value;\n});\nconst LinearTosRGB = new ShaderNode(inputs => {\n  const {\n    value\n  } = inputs;\n  const rgb = value.rgb;\n  const a = sub(mul(pow(value.rgb, vec3(0.41666)), 1.055), vec3(0.055));\n  const b = mul(rgb, 12.92);\n  const factor = vec3(lessThanEqual(rgb, vec3(0.0031308)));\n  const rgbResult = mix(a, b, factor);\n  return join(rgbResult.r, rgbResult.g, rgbResult.b, value.a);\n});\nconst EncodingLib = {\n  LinearToLinear,\n  LinearTosRGB\n};\n\nclass ColorSpaceNode extends Node {\n  constructor(method, node) {\n    super('vec4');\n    this.method = method;\n    this.node = node;\n  }\n\n  fromEncoding(encoding) {\n    let method = null;\n\n    if (encoding === LinearEncoding) {\n      method = 'Linear';\n    } else if (encoding === sRGBEncoding) {\n      method = 'sRGB';\n    }\n\n    this.method = 'LinearTo' + method;\n    return this;\n  }\n\n  generate(builder) {\n    const type = this.getNodeType(builder);\n    const method = this.method;\n    const node = this.node;\n\n    if (method !== ColorSpaceNode.LINEAR_TO_LINEAR) {\n      const encodingFunctionNode = EncodingLib[method];\n      return encodingFunctionNode({\n        value: node\n      }).build(builder, type);\n    } else {\n      return node.build(builder, type);\n    }\n  }\n\n}\n\n_defineProperty(ColorSpaceNode, \"LINEAR_TO_LINEAR\", 'LinearToLinear');\n\n_defineProperty(ColorSpaceNode, \"LINEAR_TO_SRGB\", 'LinearTosRGB');\n\nexport default ColorSpaceNode;\nexport { LinearToLinear, LinearTosRGB };\n"]},"metadata":{},"sourceType":"module"}