{"ast":null,"code":"import _classCallCheck from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Node from '../core/Node.js';\nimport PropertyNode from '../core/PropertyNode.js';\nimport ContextNode from '../core/ContextNode.js';\n\nvar CondNode = /*#__PURE__*/function (_Node) {\n  _inherits(CondNode, _Node);\n\n  var _super = _createSuper(CondNode);\n\n  function CondNode(node, ifNode, elseNode) {\n    var _this;\n\n    _classCallCheck(this, CondNode);\n\n    _this = _super.call(this);\n    _this.node = node;\n    _this.ifNode = ifNode;\n    _this.elseNode = elseNode;\n    return _this;\n  }\n\n  _createClass(CondNode, [{\n    key: \"getNodeType\",\n    value: function getNodeType(builder) {\n      var ifType = this.ifNode.getNodeType(builder);\n      var elseType = this.elseNode.getNodeType(builder);\n\n      if (builder.getTypeLength(elseType) > builder.getTypeLength(ifType)) {\n        return elseType;\n      }\n\n      return ifType;\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder) {\n      var type = this.getNodeType(builder);\n      var context = {\n        temp: false\n      };\n      var nodeProperty = new PropertyNode(null, type).build(builder);\n      var nodeSnippet = new ContextNode(this.node\n      /*, context*/\n      ).build(builder, 'bool'),\n          ifSnippet = new ContextNode(this.ifNode, context).build(builder, type),\n          elseSnippet = new ContextNode(this.elseNode, context).build(builder, type);\n      builder.addFlowCode(\"if ( \".concat(nodeSnippet, \" ) {\\n\\n\\t\\t\").concat(nodeProperty, \" = \").concat(ifSnippet, \";\\n\\n\\t} else {\\n\\n\\t\\t\").concat(nodeProperty, \" = \").concat(elseSnippet, \";\\n\\n\\t}\"));\n      return nodeProperty;\n    }\n  }]);\n\n  return CondNode;\n}(Node);\n\nexport default CondNode;","map":{"version":3,"sources":["C:/Users/jason/Documents/GitHub/build-viewer/frontend/node_modules/three-stdlib/nodes/math/CondNode.js"],"names":["Node","PropertyNode","ContextNode","CondNode","node","ifNode","elseNode","builder","ifType","getNodeType","elseType","getTypeLength","type","context","temp","nodeProperty","build","nodeSnippet","ifSnippet","elseSnippet","addFlowCode"],"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,iBAAjB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;;IAEMC,Q;;;;;AACJ,oBAAYC,IAAZ,EAAkBC,MAAlB,EAA0BC,QAA1B,EAAoC;AAAA;;AAAA;;AAClC;AACA,UAAKF,IAAL,GAAYA,IAAZ;AACA,UAAKC,MAAL,GAAcA,MAAd;AACA,UAAKC,QAAL,GAAgBA,QAAhB;AAJkC;AAKnC;;;;WAED,qBAAYC,OAAZ,EAAqB;AACnB,UAAMC,MAAM,GAAG,KAAKH,MAAL,CAAYI,WAAZ,CAAwBF,OAAxB,CAAf;AACA,UAAMG,QAAQ,GAAG,KAAKJ,QAAL,CAAcG,WAAd,CAA0BF,OAA1B,CAAjB;;AAEA,UAAIA,OAAO,CAACI,aAAR,CAAsBD,QAAtB,IAAkCH,OAAO,CAACI,aAAR,CAAsBH,MAAtB,CAAtC,EAAqE;AACnE,eAAOE,QAAP;AACD;;AAED,aAAOF,MAAP;AACD;;;WAED,kBAASD,OAAT,EAAkB;AAChB,UAAMK,IAAI,GAAG,KAAKH,WAAL,CAAiBF,OAAjB,CAAb;AACA,UAAMM,OAAO,GAAG;AACdC,QAAAA,IAAI,EAAE;AADQ,OAAhB;AAGA,UAAMC,YAAY,GAAG,IAAId,YAAJ,CAAiB,IAAjB,EAAuBW,IAAvB,EAA6BI,KAA7B,CAAmCT,OAAnC,CAArB;AACA,UAAMU,WAAW,GAAG,IAAIf,WAAJ,CAAgB,KAAKE;AACzC;AADoB,QAElBY,KAFkB,CAEZT,OAFY,EAEH,MAFG,CAApB;AAAA,UAGMW,SAAS,GAAG,IAAIhB,WAAJ,CAAgB,KAAKG,MAArB,EAA6BQ,OAA7B,EAAsCG,KAAtC,CAA4CT,OAA5C,EAAqDK,IAArD,CAHlB;AAAA,UAIMO,WAAW,GAAG,IAAIjB,WAAJ,CAAgB,KAAKI,QAArB,EAA+BO,OAA/B,EAAwCG,KAAxC,CAA8CT,OAA9C,EAAuDK,IAAvD,CAJpB;AAKAL,MAAAA,OAAO,CAACa,WAAR,gBAA4BH,WAA5B,yBAEEF,YAFF,gBAEoBG,SAFpB,oCAMEH,YANF,gBAMoBI,WANpB;AASA,aAAOJ,YAAP;AACD;;;;EAxCoBf,I;;AA4CvB,eAAeG,QAAf","sourcesContent":["import Node from '../core/Node.js';\nimport PropertyNode from '../core/PropertyNode.js';\nimport ContextNode from '../core/ContextNode.js';\n\nclass CondNode extends Node {\n  constructor(node, ifNode, elseNode) {\n    super();\n    this.node = node;\n    this.ifNode = ifNode;\n    this.elseNode = elseNode;\n  }\n\n  getNodeType(builder) {\n    const ifType = this.ifNode.getNodeType(builder);\n    const elseType = this.elseNode.getNodeType(builder);\n\n    if (builder.getTypeLength(elseType) > builder.getTypeLength(ifType)) {\n      return elseType;\n    }\n\n    return ifType;\n  }\n\n  generate(builder) {\n    const type = this.getNodeType(builder);\n    const context = {\n      temp: false\n    };\n    const nodeProperty = new PropertyNode(null, type).build(builder);\n    const nodeSnippet = new ContextNode(this.node\n    /*, context*/\n    ).build(builder, 'bool'),\n          ifSnippet = new ContextNode(this.ifNode, context).build(builder, type),\n          elseSnippet = new ContextNode(this.elseNode, context).build(builder, type);\n    builder.addFlowCode(`if ( ${nodeSnippet} ) {\n\n\\t\\t${nodeProperty} = ${ifSnippet};\n\n\\t} else {\n\n\\t\\t${nodeProperty} = ${elseSnippet};\n\n\\t}`);\n    return nodeProperty;\n  }\n\n}\n\nexport default CondNode;\n"]},"metadata":{},"sourceType":"module"}